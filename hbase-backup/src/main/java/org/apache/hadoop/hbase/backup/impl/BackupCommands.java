begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_BACKUP_LIST_DESC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_BANDWIDTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_BANDWIDTH_DESC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_DEBUG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_DEBUG_DESC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_KEEP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_KEEP_DESC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_LIST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_PATH_DESC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_RECORD_NUMBER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_RECORD_NUMBER_DESC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_SET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_SET_BACKUP_DESC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_SET_DESC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_TABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_TABLE_DESC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_TABLE_LIST_DESC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_WORKERS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_WORKERS_DESC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_YARN_QUEUE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_YARN_QUEUE_NAME_DESC
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupInfo
operator|.
name|BackupState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|BackupCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|HBackupFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|util
operator|.
name|BackupSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|util
operator|.
name|BackupUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * General backup commands, options and usage messages  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|BackupCommands
block|{
specifier|public
specifier|final
specifier|static
name|String
name|INCORRECT_USAGE
init|=
literal|"Incorrect usage"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|TOP_LEVEL_NOT_ALLOWED
init|=
literal|"Top level (root) folder is not allowed to be a backup destination"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"Usage: hbase backup COMMAND [command-specific arguments]\n"
operator|+
literal|"where COMMAND is one of:\n"
operator|+
literal|"  create     create a new backup image\n"
operator|+
literal|"  delete     delete an existing backup image\n"
operator|+
literal|"  describe   show the detailed information of a backup image\n"
operator|+
literal|"  history    show history of all successful backups\n"
operator|+
literal|"  progress   show the progress of the latest backup request\n"
operator|+
literal|"  set        backup set management\n"
operator|+
literal|"  repair     repair backup system table\n"
operator|+
literal|"  merge      merge backup images\n"
operator|+
literal|"Run \'hbase backup COMMAND -h\' to see help message for each command\n"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CREATE_CMD_USAGE
init|=
literal|"Usage: hbase backup create<type><backup_path> [options]\n"
operator|+
literal|"  type           \"full\" to create a full backup image\n"
operator|+
literal|"                 \"incremental\" to create an incremental backup image\n"
operator|+
literal|"  backup_path     Full path to store the backup image\n"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROGRESS_CMD_USAGE
init|=
literal|"Usage: hbase backup progress<backup_id>\n"
operator|+
literal|"  backup_id       Backup image id (optional). If no id specified, the command will show\n"
operator|+
literal|"                  progress for currently running backup session."
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NO_INFO_FOUND
init|=
literal|"No info was found for backup id: "
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NO_ACTIVE_SESSION_FOUND
init|=
literal|"No active backup sessions found."
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DESCRIBE_CMD_USAGE
init|=
literal|"Usage: hbase backup describe<backup_id>\n"
operator|+
literal|"  backup_id       Backup image id\n"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HISTORY_CMD_USAGE
init|=
literal|"Usage: hbase backup history [options]"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DELETE_CMD_USAGE
init|=
literal|"Usage: hbase backup delete [options]"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REPAIR_CMD_USAGE
init|=
literal|"Usage: hbase backup repair\n"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SET_CMD_USAGE
init|=
literal|"Usage: hbase backup set COMMAND [name] [tables]\n"
operator|+
literal|"  name            Backup set name\n"
operator|+
literal|"  tables          Comma separated list of tables.\n"
operator|+
literal|"COMMAND is one of:\n"
operator|+
literal|"  add             add tables to a set, create a set if needed\n"
operator|+
literal|"  remove          remove tables from a set\n"
operator|+
literal|"  list            list all backup sets in the system\n"
operator|+
literal|"  describe        describe set\n"
operator|+
literal|"  delete          delete backup set\n"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MERGE_CMD_USAGE
init|=
literal|"Usage: hbase backup merge [backup_ids]\n"
operator|+
literal|"  backup_ids      Comma separated list of backup image ids.\n"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|USAGE_FOOTER
init|=
literal|""
decl_stmt|;
specifier|public
specifier|static
specifier|abstract
class|class
name|Command
extends|extends
name|Configured
block|{
name|CommandLine
name|cmdline
decl_stmt|;
name|Connection
name|conn
decl_stmt|;
name|Command
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cmdline
operator|.
name|hasOption
argument_list|(
literal|"h"
argument_list|)
operator|||
name|cmdline
operator|.
name|hasOption
argument_list|(
literal|"help"
argument_list|)
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
comment|// Create connection
name|conn
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|requiresNoActiveSession
argument_list|()
condition|)
block|{
comment|// Check active session
try|try
init|(
name|BackupSystemTable
name|table
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|sessions
init|=
name|table
operator|.
name|getBackupInfos
argument_list|(
name|BackupState
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
if|if
condition|(
name|sessions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Found backup session in a RUNNING state: "
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|sessions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"This may indicate that a previous session has failed abnormally."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"In this case, backup recovery is recommended."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Active session found, aborted command execution"
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|requiresConsistentState
argument_list|()
condition|)
block|{
comment|// Check failed delete
try|try
init|(
name|BackupSystemTable
name|table
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|String
index|[]
name|ids
init|=
name|table
operator|.
name|getListOfBackupIdsFromDeleteOperation
argument_list|()
decl_stmt|;
if|if
condition|(
name|ids
operator|!=
literal|null
operator|&&
name|ids
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Found failed backup DELETE coommand. "
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Backup system recovery is required."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed backup DELETE found, aborted command execution"
argument_list|)
throw|;
block|}
name|ids
operator|=
name|table
operator|.
name|getListOfBackupIdsFromMergeOperation
argument_list|()
expr_stmt|;
if|if
condition|(
name|ids
operator|!=
literal|null
operator|&&
name|ids
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Found failed backup MERGE coommand. "
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Backup system recovery is required."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed backup MERGE found, aborted command execution"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
specifier|abstract
name|void
name|printUsage
parameter_list|()
function_decl|;
comment|/**      * The command can't be run if active backup session is in progress      * @return true if no active sessions are in progress      */
specifier|protected
name|boolean
name|requiresNoActiveSession
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Command requires consistent state of a backup system Backup system may become inconsistent      * because of an abnormal termination of a backup session or delete command      * @return true, if yes      */
specifier|protected
name|boolean
name|requiresConsistentState
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|BackupCommands
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Instantiating utility class..."
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|Command
name|createCommand
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|BackupCommand
name|type
parameter_list|,
name|CommandLine
name|cmdline
parameter_list|)
block|{
name|Command
name|cmd
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|CREATE
case|:
name|cmd
operator|=
operator|new
name|CreateCommand
argument_list|(
name|conf
argument_list|,
name|cmdline
argument_list|)
expr_stmt|;
break|break;
case|case
name|DESCRIBE
case|:
name|cmd
operator|=
operator|new
name|DescribeCommand
argument_list|(
name|conf
argument_list|,
name|cmdline
argument_list|)
expr_stmt|;
break|break;
case|case
name|PROGRESS
case|:
name|cmd
operator|=
operator|new
name|ProgressCommand
argument_list|(
name|conf
argument_list|,
name|cmdline
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|cmd
operator|=
operator|new
name|DeleteCommand
argument_list|(
name|conf
argument_list|,
name|cmdline
argument_list|)
expr_stmt|;
break|break;
case|case
name|HISTORY
case|:
name|cmd
operator|=
operator|new
name|HistoryCommand
argument_list|(
name|conf
argument_list|,
name|cmdline
argument_list|)
expr_stmt|;
break|break;
case|case
name|SET
case|:
name|cmd
operator|=
operator|new
name|BackupSetCommand
argument_list|(
name|conf
argument_list|,
name|cmdline
argument_list|)
expr_stmt|;
break|break;
case|case
name|REPAIR
case|:
name|cmd
operator|=
operator|new
name|RepairCommand
argument_list|(
name|conf
argument_list|,
name|cmdline
argument_list|)
expr_stmt|;
break|break;
case|case
name|MERGE
case|:
name|cmd
operator|=
operator|new
name|MergeCommand
argument_list|(
name|conf
argument_list|,
name|cmdline
argument_list|)
expr_stmt|;
break|break;
case|case
name|HELP
case|:
default|default:
name|cmd
operator|=
operator|new
name|HelpCommand
argument_list|(
name|conf
argument_list|,
name|cmdline
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|cmd
return|;
block|}
specifier|static
name|int
name|numOfArgs
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|args
operator|.
name|length
return|;
block|}
specifier|public
specifier|static
class|class
name|CreateCommand
extends|extends
name|Command
block|{
name|CreateCommand
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|CommandLine
name|cmdline
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|cmdline
operator|=
name|cmdline
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|requiresNoActiveSession
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|requiresConsistentState
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cmdline
operator|==
literal|null
operator|||
name|cmdline
operator|.
name|getArgs
argument_list|()
operator|==
literal|null
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
name|String
index|[]
name|args
init|=
name|cmdline
operator|.
name|getArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|BackupType
operator|.
name|FULL
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
operator|&&
operator|!
name|BackupType
operator|.
name|INCREMENTAL
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: invalid backup type: "
operator|+
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|verifyPath
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: invalid backup destination: "
operator|+
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
name|String
name|targetBackupDir
init|=
name|args
index|[
literal|2
index|]
decl_stmt|;
comment|// Check if backup destination is top level (root) folder - not allowed
if|if
condition|(
name|isRootFolder
argument_list|(
name|targetBackupDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|TOP_LEVEL_NOT_ALLOWED
argument_list|)
throw|;
block|}
name|String
name|tables
decl_stmt|;
comment|// Check if we have both: backup set and list of tables
if|if
condition|(
name|cmdline
operator|.
name|hasOption
argument_list|(
name|OPTION_TABLE
argument_list|)
operator|&&
name|cmdline
operator|.
name|hasOption
argument_list|(
name|OPTION_SET
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: You can specify either backup set or list"
operator|+
literal|" of tables, but not both"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
comment|// Creates connection
name|super
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// Check backup set
name|String
name|setName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cmdline
operator|.
name|hasOption
argument_list|(
name|OPTION_SET
argument_list|)
condition|)
block|{
name|setName
operator|=
name|cmdline
operator|.
name|getOptionValue
argument_list|(
name|OPTION_SET
argument_list|)
expr_stmt|;
name|tables
operator|=
name|getTablesForSet
argument_list|(
name|setName
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tables
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: Backup set '"
operator|+
name|setName
operator|+
literal|"' is either empty or does not exist"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|tables
operator|=
name|cmdline
operator|.
name|getOptionValue
argument_list|(
name|OPTION_TABLE
argument_list|)
expr_stmt|;
block|}
name|int
name|bandwidth
init|=
name|cmdline
operator|.
name|hasOption
argument_list|(
name|OPTION_BANDWIDTH
argument_list|)
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmdline
operator|.
name|getOptionValue
argument_list|(
name|OPTION_BANDWIDTH
argument_list|)
argument_list|)
else|:
operator|-
literal|1
decl_stmt|;
name|int
name|workers
init|=
name|cmdline
operator|.
name|hasOption
argument_list|(
name|OPTION_WORKERS
argument_list|)
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmdline
operator|.
name|getOptionValue
argument_list|(
name|OPTION_WORKERS
argument_list|)
argument_list|)
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|cmdline
operator|.
name|hasOption
argument_list|(
name|OPTION_YARN_QUEUE_NAME
argument_list|)
condition|)
block|{
name|String
name|queueName
init|=
name|cmdline
operator|.
name|getOptionValue
argument_list|(
name|OPTION_YARN_QUEUE_NAME
argument_list|)
decl_stmt|;
comment|// Set system property value for MR job
name|System
operator|.
name|setProperty
argument_list|(
literal|"mapreduce.job.queuename"
argument_list|,
name|queueName
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|BackupAdminImpl
name|admin
init|=
operator|new
name|BackupAdminImpl
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|BackupRequest
operator|.
name|Builder
name|builder
init|=
operator|new
name|BackupRequest
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|BackupRequest
name|request
init|=
name|builder
operator|.
name|withBackupType
argument_list|(
name|BackupType
operator|.
name|valueOf
argument_list|(
name|args
index|[
literal|1
index|]
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withTableList
argument_list|(
name|tables
operator|!=
literal|null
condition|?
name|Lists
operator|.
name|newArrayList
argument_list|(
name|BackupUtils
operator|.
name|parseTableNames
argument_list|(
name|tables
argument_list|)
argument_list|)
else|:
literal|null
argument_list|)
operator|.
name|withTargetRootDir
argument_list|(
name|targetBackupDir
argument_list|)
operator|.
name|withTotalTasks
argument_list|(
name|workers
argument_list|)
operator|.
name|withBandwidthPerTasks
argument_list|(
name|bandwidth
argument_list|)
operator|.
name|withBackupSetName
argument_list|(
name|setName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|backupId
init|=
name|admin
operator|.
name|backupTables
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Backup session "
operator|+
name|backupId
operator|+
literal|" finished. Status: SUCCESS"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Backup session finished. Status: FAILURE"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|boolean
name|isRootFolder
parameter_list|(
name|String
name|targetBackupDir
parameter_list|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|targetBackupDir
argument_list|)
decl_stmt|;
return|return
name|p
operator|.
name|isRoot
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|verifyPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
try|try
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
operator|!=
literal|null
condition|?
name|getConf
argument_list|()
else|:
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|URI
name|uri
init|=
name|p
operator|.
name|toUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|String
name|getTablesForSet
parameter_list|(
name|String
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
specifier|final
name|BackupSystemTable
name|table
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|List
argument_list|<
name|TableName
argument_list|>
name|tables
init|=
name|table
operator|.
name|describeBackupSet
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|tables
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|StringUtils
operator|.
name|join
argument_list|(
name|tables
argument_list|,
name|BackupRestoreConstants
operator|.
name|TABLENAME_DELIMITER_IN_COMMAND
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|CREATE_CMD_USAGE
argument_list|)
expr_stmt|;
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OPTION_WORKERS
argument_list|,
literal|true
argument_list|,
name|OPTION_WORKERS_DESC
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OPTION_BANDWIDTH
argument_list|,
literal|true
argument_list|,
name|OPTION_BANDWIDTH_DESC
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OPTION_SET
argument_list|,
literal|true
argument_list|,
name|OPTION_SET_BACKUP_DESC
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OPTION_TABLE
argument_list|,
literal|true
argument_list|,
name|OPTION_TABLE_LIST_DESC
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OPTION_YARN_QUEUE_NAME
argument_list|,
literal|true
argument_list|,
name|OPTION_YARN_QUEUE_NAME_DESC
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OPTION_DEBUG
argument_list|,
literal|false
argument_list|,
name|OPTION_DEBUG_DESC
argument_list|)
expr_stmt|;
name|HelpFormatter
name|helpFormatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|helpFormatter
operator|.
name|setLeftPadding
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|helpFormatter
operator|.
name|setDescPadding
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|helpFormatter
operator|.
name|setWidth
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|helpFormatter
operator|.
name|setSyntaxPrefix
argument_list|(
literal|"Options:"
argument_list|)
expr_stmt|;
name|helpFormatter
operator|.
name|printHelp
argument_list|(
literal|" "
argument_list|,
literal|null
argument_list|,
name|options
argument_list|,
name|USAGE_FOOTER
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|HelpCommand
extends|extends
name|Command
block|{
name|HelpCommand
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|CommandLine
name|cmdline
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|cmdline
operator|=
name|cmdline
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cmdline
operator|==
literal|null
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
name|String
index|[]
name|args
init|=
name|cmdline
operator|.
name|getArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|==
literal|null
operator|||
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: Only supports help message of a single command type"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
name|String
name|type
init|=
name|args
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|BackupCommand
operator|.
name|CREATE
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|CREATE_CMD_USAGE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|BackupCommand
operator|.
name|DESCRIBE
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|DESCRIBE_CMD_USAGE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|BackupCommand
operator|.
name|HISTORY
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|HISTORY_CMD_USAGE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|BackupCommand
operator|.
name|PROGRESS
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|PROGRESS_CMD_USAGE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|BackupCommand
operator|.
name|DELETE
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|DELETE_CMD_USAGE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|BackupCommand
operator|.
name|SET
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|SET_CMD_USAGE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unknown command : "
operator|+
name|type
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|USAGE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DescribeCommand
extends|extends
name|Command
block|{
name|DescribeCommand
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|CommandLine
name|cmdline
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|cmdline
operator|=
name|cmdline
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cmdline
operator|==
literal|null
operator|||
name|cmdline
operator|.
name|getArgs
argument_list|()
operator|==
literal|null
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
name|String
index|[]
name|args
init|=
name|cmdline
operator|.
name|getArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
name|super
operator|.
name|execute
argument_list|()
expr_stmt|;
name|String
name|backupId
init|=
name|args
index|[
literal|1
index|]
decl_stmt|;
try|try
init|(
specifier|final
name|BackupSystemTable
name|sysTable
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|BackupInfo
name|info
init|=
name|sysTable
operator|.
name|readBackupInfo
argument_list|(
name|backupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: "
operator|+
name|backupId
operator|+
literal|" does not exist"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|info
operator|.
name|getShortDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|DESCRIBE_CMD_USAGE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ProgressCommand
extends|extends
name|Command
block|{
name|ProgressCommand
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|CommandLine
name|cmdline
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|cmdline
operator|=
name|cmdline
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cmdline
operator|==
literal|null
operator|||
name|cmdline
operator|.
name|getArgs
argument_list|()
operator|==
literal|null
operator|||
name|cmdline
operator|.
name|getArgs
argument_list|()
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No backup id was specified, "
operator|+
literal|"will retrieve the most recent (ongoing) session"
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|args
init|=
name|cmdline
operator|==
literal|null
condition|?
literal|null
else|:
name|cmdline
operator|.
name|getArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
operator|&&
name|args
operator|.
name|length
operator|>
literal|2
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: wrong number of arguments: "
operator|+
name|args
operator|.
name|length
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
name|super
operator|.
name|execute
argument_list|()
expr_stmt|;
name|String
name|backupId
init|=
operator|(
name|args
operator|==
literal|null
operator|||
name|args
operator|.
name|length
operator|<=
literal|1
operator|)
condition|?
literal|null
else|:
name|args
index|[
literal|1
index|]
decl_stmt|;
try|try
init|(
specifier|final
name|BackupSystemTable
name|sysTable
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|BackupInfo
name|info
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|backupId
operator|!=
literal|null
condition|)
block|{
name|info
operator|=
name|sysTable
operator|.
name|readBackupInfo
argument_list|(
name|backupId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|infos
init|=
name|sysTable
operator|.
name|getBackupInfos
argument_list|(
name|BackupState
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
if|if
condition|(
name|infos
operator|!=
literal|null
operator|&&
name|infos
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|info
operator|=
name|infos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|backupId
operator|=
name|info
operator|.
name|getBackupId
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found ongoing session with backupId="
operator|+
name|backupId
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|progress
init|=
name|info
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|info
operator|.
name|getProgress
argument_list|()
decl_stmt|;
if|if
condition|(
name|progress
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|backupId
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|NO_INFO_FOUND
operator|+
name|backupId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|NO_ACTIVE_SESSION_FOUND
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|backupId
operator|+
literal|" progress="
operator|+
name|progress
operator|+
literal|"%"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|PROGRESS_CMD_USAGE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DeleteCommand
extends|extends
name|Command
block|{
name|DeleteCommand
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|CommandLine
name|cmdline
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|cmdline
operator|=
name|cmdline
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|requiresNoActiveSession
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cmdline
operator|==
literal|null
operator|||
name|cmdline
operator|.
name|getArgs
argument_list|()
operator|==
literal|null
operator|||
name|cmdline
operator|.
name|getArgs
argument_list|()
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|cmdline
operator|.
name|hasOption
argument_list|(
name|OPTION_KEEP
argument_list|)
operator|&&
operator|!
name|cmdline
operator|.
name|hasOption
argument_list|(
name|OPTION_LIST
argument_list|)
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
name|super
operator|.
name|execute
argument_list|()
expr_stmt|;
if|if
condition|(
name|cmdline
operator|.
name|hasOption
argument_list|(
name|OPTION_KEEP
argument_list|)
condition|)
block|{
name|executeDeleteOlderThan
argument_list|(
name|cmdline
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmdline
operator|.
name|hasOption
argument_list|(
name|OPTION_LIST
argument_list|)
condition|)
block|{
name|executeDeleteListOfBackups
argument_list|(
name|cmdline
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|executeDeleteOlderThan
parameter_list|(
name|CommandLine
name|cmdline
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|value
init|=
name|cmdline
operator|.
name|getOptionValue
argument_list|(
name|OPTION_KEEP
argument_list|)
decl_stmt|;
name|int
name|days
init|=
literal|0
decl_stmt|;
try|try
block|{
name|days
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|value
operator|+
literal|" is not an integer number"
argument_list|)
throw|;
block|}
specifier|final
name|long
name|fdays
init|=
name|days
decl_stmt|;
name|BackupInfo
operator|.
name|Filter
name|dateFilter
init|=
operator|new
name|BackupInfo
operator|.
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|BackupInfo
name|info
parameter_list|)
block|{
name|long
name|currentTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|long
name|maxTsToDelete
init|=
name|currentTime
operator|-
name|fdays
operator|*
literal|24
operator|*
literal|3600
operator|*
literal|1000
decl_stmt|;
return|return
name|info
operator|.
name|getCompleteTs
argument_list|()
operator|<=
name|maxTsToDelete
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|history
init|=
literal|null
decl_stmt|;
try|try
init|(
specifier|final
name|BackupSystemTable
name|sysTable
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
init|;
name|BackupAdminImpl
name|admin
operator|=
operator|new
name|BackupAdminImpl
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|history
operator|=
name|sysTable
operator|.
name|getBackupHistory
argument_list|(
operator|-
literal|1
argument_list|,
name|dateFilter
argument_list|)
expr_stmt|;
name|String
index|[]
name|backupIds
init|=
name|convertToBackupIds
argument_list|(
name|history
argument_list|)
decl_stmt|;
name|int
name|deleted
init|=
name|admin
operator|.
name|deleteBackups
argument_list|(
name|backupIds
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Deleted "
operator|+
name|deleted
operator|+
literal|" backups. Total older than "
operator|+
name|days
operator|+
literal|" days: "
operator|+
name|backupIds
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Delete command FAILED. Please run backup repair tool to restore backup "
operator|+
literal|"system integrity"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|String
index|[]
name|convertToBackupIds
parameter_list|(
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|history
parameter_list|)
block|{
name|String
index|[]
name|ids
init|=
operator|new
name|String
index|[
name|history
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ids
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ids
index|[
name|i
index|]
operator|=
name|history
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getBackupId
argument_list|()
expr_stmt|;
block|}
return|return
name|ids
return|;
block|}
specifier|private
name|void
name|executeDeleteListOfBackups
parameter_list|(
name|CommandLine
name|cmdline
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|value
init|=
name|cmdline
operator|.
name|getOptionValue
argument_list|(
name|OPTION_LIST
argument_list|)
decl_stmt|;
name|String
index|[]
name|backupIds
init|=
name|value
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
try|try
init|(
name|BackupAdminImpl
name|admin
init|=
operator|new
name|BackupAdminImpl
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|int
name|deleted
init|=
name|admin
operator|.
name|deleteBackups
argument_list|(
name|backupIds
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Deleted "
operator|+
name|deleted
operator|+
literal|" backups. Total requested: "
operator|+
name|backupIds
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Delete command FAILED. Please run backup repair tool to restore backup "
operator|+
literal|"system integrity"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|DELETE_CMD_USAGE
argument_list|)
expr_stmt|;
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OPTION_KEEP
argument_list|,
literal|true
argument_list|,
name|OPTION_KEEP_DESC
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OPTION_LIST
argument_list|,
literal|true
argument_list|,
name|OPTION_BACKUP_LIST_DESC
argument_list|)
expr_stmt|;
name|HelpFormatter
name|helpFormatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|helpFormatter
operator|.
name|setLeftPadding
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|helpFormatter
operator|.
name|setDescPadding
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|helpFormatter
operator|.
name|setWidth
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|helpFormatter
operator|.
name|setSyntaxPrefix
argument_list|(
literal|"Options:"
argument_list|)
expr_stmt|;
name|helpFormatter
operator|.
name|printHelp
argument_list|(
literal|" "
argument_list|,
literal|null
argument_list|,
name|options
argument_list|,
name|USAGE_FOOTER
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|RepairCommand
extends|extends
name|Command
block|{
name|RepairCommand
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|CommandLine
name|cmdline
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|cmdline
operator|=
name|cmdline
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|execute
argument_list|()
expr_stmt|;
name|String
index|[]
name|args
init|=
name|cmdline
operator|==
literal|null
condition|?
literal|null
else|:
name|cmdline
operator|.
name|getArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
operator|&&
name|args
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: wrong number of arguments: "
operator|+
name|args
operator|.
name|length
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
operator|!=
literal|null
condition|?
name|getConf
argument_list|()
else|:
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|final
name|BackupSystemTable
name|sysTable
operator|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
init|)
block|{
comment|// Failed backup
name|BackupInfo
name|backupInfo
decl_stmt|;
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|list
init|=
name|sysTable
operator|.
name|getBackupInfos
argument_list|(
name|BackupState
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// No failed sessions found
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"REPAIR status: no failed sessions found."
operator|+
literal|" Checking failed delete backup operation ..."
argument_list|)
expr_stmt|;
name|repairFailedBackupDeletionIfAny
argument_list|(
name|conn
argument_list|,
name|sysTable
argument_list|)
expr_stmt|;
name|repairFailedBackupMergeIfAny
argument_list|(
name|conn
argument_list|,
name|sysTable
argument_list|)
expr_stmt|;
return|return;
block|}
name|backupInfo
operator|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// If this is a cancel exception, then we've already cleaned.
comment|// set the failure timestamp of the overall backup
name|backupInfo
operator|.
name|setCompleteTs
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// set failure message
name|backupInfo
operator|.
name|setFailedMsg
argument_list|(
literal|"REPAIR status: repaired after failure:\n"
operator|+
name|backupInfo
argument_list|)
expr_stmt|;
comment|// set overall backup status: failed
name|backupInfo
operator|.
name|setState
argument_list|(
name|BackupState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|// compose the backup failed data
name|String
name|backupFailedData
init|=
literal|"BackupId="
operator|+
name|backupInfo
operator|.
name|getBackupId
argument_list|()
operator|+
literal|",startts="
operator|+
name|backupInfo
operator|.
name|getStartTs
argument_list|()
operator|+
literal|",failedts="
operator|+
name|backupInfo
operator|.
name|getCompleteTs
argument_list|()
operator|+
literal|",failedphase="
operator|+
name|backupInfo
operator|.
name|getPhase
argument_list|()
operator|+
literal|",failedmessage="
operator|+
name|backupInfo
operator|.
name|getFailedMsg
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|backupFailedData
argument_list|)
expr_stmt|;
name|TableBackupClient
operator|.
name|cleanupAndRestoreBackupSystem
argument_list|(
name|conn
argument_list|,
name|backupInfo
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// If backup session is updated to FAILED state - means we
comment|// processed recovery already.
name|sysTable
operator|.
name|updateBackupInfo
argument_list|(
name|backupInfo
argument_list|)
expr_stmt|;
name|sysTable
operator|.
name|finishBackupExclusiveOperation
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"REPAIR status: finished repair failed session:\n "
operator|+
name|backupInfo
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|repairFailedBackupDeletionIfAny
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|BackupSystemTable
name|sysTable
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|backupIds
init|=
name|sysTable
operator|.
name|getListOfBackupIdsFromDeleteOperation
argument_list|()
decl_stmt|;
if|if
condition|(
name|backupIds
operator|==
literal|null
operator|||
name|backupIds
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No failed backup DELETE operation found"
argument_list|)
expr_stmt|;
comment|// Delete backup table snapshot if exists
name|BackupSystemTable
operator|.
name|deleteSnapshot
argument_list|(
name|conn
argument_list|)
expr_stmt|;
return|return;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found failed DELETE operation for: "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|backupIds
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Running DELETE again ..."
argument_list|)
expr_stmt|;
comment|// Restore table from snapshot
name|BackupSystemTable
operator|.
name|restoreFromSnapshot
argument_list|(
name|conn
argument_list|)
expr_stmt|;
comment|// Finish previous failed session
name|sysTable
operator|.
name|finishBackupExclusiveOperation
argument_list|()
expr_stmt|;
try|try
init|(
name|BackupAdmin
name|admin
init|=
operator|new
name|BackupAdminImpl
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|admin
operator|.
name|deleteBackups
argument_list|(
name|backupIds
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DELETE operation finished OK: "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|backupIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|repairFailedBackupMergeIfAny
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|BackupSystemTable
name|sysTable
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|backupIds
init|=
name|sysTable
operator|.
name|getListOfBackupIdsFromMergeOperation
argument_list|()
decl_stmt|;
if|if
condition|(
name|backupIds
operator|==
literal|null
operator|||
name|backupIds
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No failed backup MERGE operation found"
argument_list|)
expr_stmt|;
comment|// Delete backup table snapshot if exists
name|BackupSystemTable
operator|.
name|deleteSnapshot
argument_list|(
name|conn
argument_list|)
expr_stmt|;
return|return;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found failed MERGE operation for: "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|backupIds
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check if backup .tmp exists
name|BackupInfo
name|bInfo
init|=
name|sysTable
operator|.
name|readBackupInfo
argument_list|(
name|backupIds
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|String
name|backupRoot
init|=
name|bInfo
operator|.
name|getBackupRootDir
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|Path
argument_list|(
name|backupRoot
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|backupId
init|=
name|BackupUtils
operator|.
name|findMostRecentBackupId
argument_list|(
name|backupIds
argument_list|)
decl_stmt|;
name|Path
name|tmpPath
init|=
name|HBackupFileSystem
operator|.
name|getBackupTmpDirPathForBackupId
argument_list|(
name|backupRoot
argument_list|,
name|backupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|tmpPath
argument_list|)
condition|)
block|{
comment|// Move data back
name|Path
name|destPath
init|=
name|HBackupFileSystem
operator|.
name|getBackupPath
argument_list|(
name|backupRoot
argument_list|,
name|backupId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|destPath
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to delete "
operator|+
name|destPath
argument_list|)
expr_stmt|;
block|}
name|boolean
name|res
init|=
name|fs
operator|.
name|rename
argument_list|(
name|tmpPath
argument_list|,
name|destPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"MERGE repair: failed  to rename from "
operator|+
name|tmpPath
operator|+
literal|" to "
operator|+
name|destPath
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MERGE repair: renamed from "
operator|+
name|tmpPath
operator|+
literal|" to "
operator|+
name|destPath
operator|+
literal|" res="
operator|+
name|res
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkRemoveBackupImages
argument_list|(
name|fs
argument_list|,
name|backupRoot
argument_list|,
name|backupIds
argument_list|)
expr_stmt|;
block|}
comment|// Restore table from snapshot
name|BackupSystemTable
operator|.
name|restoreFromSnapshot
argument_list|(
name|conn
argument_list|)
expr_stmt|;
comment|// Unlock backup system
name|sysTable
operator|.
name|finishBackupExclusiveOperation
argument_list|()
expr_stmt|;
comment|// Finish previous failed session
name|sysTable
operator|.
name|finishMergeOperation
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MERGE repair operation finished OK: "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|backupIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|checkRemoveBackupImages
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|backupRoot
parameter_list|,
name|String
index|[]
name|backupIds
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|mergedBackupId
init|=
name|BackupUtils
operator|.
name|findMostRecentBackupId
argument_list|(
name|backupIds
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|backupId
range|:
name|backupIds
control|)
block|{
if|if
condition|(
name|backupId
operator|.
name|equals
argument_list|(
name|mergedBackupId
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Path
name|path
init|=
name|HBackupFileSystem
operator|.
name|getBackupPath
argument_list|(
name|backupRoot
argument_list|,
name|backupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MERGE repair removing: "
operator|+
name|path
operator|+
literal|" - FAILED"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MERGE repair removing: "
operator|+
name|path
operator|+
literal|" - OK"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|REPAIR_CMD_USAGE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MergeCommand
extends|extends
name|Command
block|{
name|MergeCommand
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|CommandLine
name|cmdline
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|cmdline
operator|=
name|cmdline
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|requiresNoActiveSession
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|requiresConsistentState
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|execute
argument_list|()
expr_stmt|;
name|String
index|[]
name|args
init|=
name|cmdline
operator|==
literal|null
condition|?
literal|null
else|:
name|cmdline
operator|.
name|getArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|==
literal|null
operator|||
operator|(
name|args
operator|.
name|length
operator|!=
literal|2
operator|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: wrong number of arguments: "
operator|+
operator|(
name|args
operator|==
literal|null
condition|?
literal|null
else|:
name|args
operator|.
name|length
operator|)
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
name|String
index|[]
name|backupIds
init|=
name|args
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|backupIds
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|String
name|msg
init|=
literal|"ERROR: can not merge a single backup image. "
operator|+
literal|"Number of images must be greater than 1."
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
operator|!=
literal|null
condition|?
name|getConf
argument_list|()
else|:
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|final
name|BackupAdminImpl
name|admin
operator|=
operator|new
name|BackupAdminImpl
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|admin
operator|.
name|mergeBackups
argument_list|(
name|backupIds
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|MERGE_CMD_USAGE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|HistoryCommand
extends|extends
name|Command
block|{
specifier|private
specifier|final
specifier|static
name|int
name|DEFAULT_HISTORY_LENGTH
init|=
literal|10
decl_stmt|;
name|HistoryCommand
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|CommandLine
name|cmdline
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|cmdline
operator|=
name|cmdline
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|n
init|=
name|parseHistoryLength
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|getTableName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|setName
init|=
name|getTableSetName
argument_list|()
decl_stmt|;
name|BackupInfo
operator|.
name|Filter
name|tableNameFilter
init|=
operator|new
name|BackupInfo
operator|.
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|BackupInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|List
argument_list|<
name|TableName
argument_list|>
name|names
init|=
name|info
operator|.
name|getTableNames
argument_list|()
decl_stmt|;
return|return
name|names
operator|.
name|contains
argument_list|(
name|tableName
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|BackupInfo
operator|.
name|Filter
name|tableSetFilter
init|=
operator|new
name|BackupInfo
operator|.
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|BackupInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|setName
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|backupId
init|=
name|info
operator|.
name|getBackupId
argument_list|()
decl_stmt|;
return|return
name|backupId
operator|.
name|startsWith
argument_list|(
name|setName
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Path
name|backupRootPath
init|=
name|getBackupRootPath
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|history
decl_stmt|;
if|if
condition|(
name|backupRootPath
operator|==
literal|null
condition|)
block|{
comment|// Load from backup system table
name|super
operator|.
name|execute
argument_list|()
expr_stmt|;
try|try
init|(
specifier|final
name|BackupSystemTable
name|sysTable
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|history
operator|=
name|sysTable
operator|.
name|getBackupHistory
argument_list|(
name|n
argument_list|,
name|tableNameFilter
argument_list|,
name|tableSetFilter
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// load from backup FS
name|history
operator|=
name|BackupUtils
operator|.
name|getHistory
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|n
argument_list|,
name|backupRootPath
argument_list|,
name|tableNameFilter
argument_list|,
name|tableSetFilter
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BackupInfo
name|info
range|:
name|history
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|info
operator|.
name|getShortDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Path
name|getBackupRootPath
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|value
init|=
literal|null
decl_stmt|;
try|try
block|{
name|value
operator|=
name|cmdline
operator|.
name|getOptionValue
argument_list|(
name|OPTION_PATH
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: Illegal argument for backup root path: "
operator|+
name|value
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
block|}
specifier|private
name|TableName
name|getTableName
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|value
init|=
name|cmdline
operator|.
name|getOptionValue
argument_list|(
name|OPTION_TABLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|TableName
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Illegal argument for table name: "
operator|+
name|value
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|getTableSetName
parameter_list|()
block|{
return|return
name|cmdline
operator|.
name|getOptionValue
argument_list|(
name|OPTION_SET
argument_list|)
return|;
block|}
specifier|private
name|int
name|parseHistoryLength
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|value
init|=
name|cmdline
operator|.
name|getOptionValue
argument_list|(
name|OPTION_RECORD_NUMBER
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|DEFAULT_HISTORY_LENGTH
return|;
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Illegal argument for history length: "
operator|+
name|value
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|HISTORY_CMD_USAGE
argument_list|)
expr_stmt|;
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OPTION_RECORD_NUMBER
argument_list|,
literal|true
argument_list|,
name|OPTION_RECORD_NUMBER_DESC
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OPTION_PATH
argument_list|,
literal|true
argument_list|,
name|OPTION_PATH_DESC
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OPTION_TABLE
argument_list|,
literal|true
argument_list|,
name|OPTION_TABLE_DESC
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OPTION_SET
argument_list|,
literal|true
argument_list|,
name|OPTION_SET_DESC
argument_list|)
expr_stmt|;
name|HelpFormatter
name|helpFormatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|helpFormatter
operator|.
name|setLeftPadding
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|helpFormatter
operator|.
name|setDescPadding
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|helpFormatter
operator|.
name|setWidth
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|helpFormatter
operator|.
name|setSyntaxPrefix
argument_list|(
literal|"Options:"
argument_list|)
expr_stmt|;
name|helpFormatter
operator|.
name|printHelp
argument_list|(
literal|" "
argument_list|,
literal|null
argument_list|,
name|options
argument_list|,
name|USAGE_FOOTER
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|BackupSetCommand
extends|extends
name|Command
block|{
specifier|private
specifier|final
specifier|static
name|String
name|SET_ADD_CMD
init|=
literal|"add"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|SET_REMOVE_CMD
init|=
literal|"remove"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|SET_DELETE_CMD
init|=
literal|"delete"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|SET_DESCRIBE_CMD
init|=
literal|"describe"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|SET_LIST_CMD
init|=
literal|"list"
decl_stmt|;
name|BackupSetCommand
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|CommandLine
name|cmdline
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|cmdline
operator|=
name|cmdline
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Command-line must have at least one element
if|if
condition|(
name|cmdline
operator|==
literal|null
operator|||
name|cmdline
operator|.
name|getArgs
argument_list|()
operator|==
literal|null
operator|||
name|cmdline
operator|.
name|getArgs
argument_list|()
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
name|String
index|[]
name|args
init|=
name|cmdline
operator|.
name|getArgs
argument_list|()
decl_stmt|;
name|String
name|cmdStr
init|=
name|args
index|[
literal|1
index|]
decl_stmt|;
name|BackupCommand
name|cmd
init|=
name|getCommand
argument_list|(
name|cmdStr
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|cmd
condition|)
block|{
case|case
name|SET_ADD
case|:
name|processSetAdd
argument_list|(
name|args
argument_list|)
expr_stmt|;
break|break;
case|case
name|SET_REMOVE
case|:
name|processSetRemove
argument_list|(
name|args
argument_list|)
expr_stmt|;
break|break;
case|case
name|SET_DELETE
case|:
name|processSetDelete
argument_list|(
name|args
argument_list|)
expr_stmt|;
break|break;
case|case
name|SET_DESCRIBE
case|:
name|processSetDescribe
argument_list|(
name|args
argument_list|)
expr_stmt|;
break|break;
case|case
name|SET_LIST
case|:
name|processSetList
argument_list|(
name|args
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
specifier|private
name|void
name|processSetList
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// List all backup set names
comment|// does not expect any args
try|try
init|(
name|BackupAdminImpl
name|admin
init|=
operator|new
name|BackupAdminImpl
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|List
argument_list|<
name|BackupSet
argument_list|>
name|list
init|=
name|admin
operator|.
name|listBackupSets
argument_list|()
decl_stmt|;
for|for
control|(
name|BackupSet
name|bs
range|:
name|list
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|bs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|processSetDescribe
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|==
literal|null
operator|||
name|args
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
name|super
operator|.
name|execute
argument_list|()
expr_stmt|;
name|String
name|setName
init|=
name|args
index|[
literal|2
index|]
decl_stmt|;
try|try
init|(
specifier|final
name|BackupSystemTable
name|sysTable
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|List
argument_list|<
name|TableName
argument_list|>
name|tables
init|=
name|sysTable
operator|.
name|describeBackupSet
argument_list|(
name|setName
argument_list|)
decl_stmt|;
name|BackupSet
name|set
init|=
name|tables
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|BackupSet
argument_list|(
name|setName
argument_list|,
name|tables
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Set '"
operator|+
name|setName
operator|+
literal|"' does not exist."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|set
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|processSetDelete
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|==
literal|null
operator|||
name|args
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
name|super
operator|.
name|execute
argument_list|()
expr_stmt|;
name|String
name|setName
init|=
name|args
index|[
literal|2
index|]
decl_stmt|;
try|try
init|(
specifier|final
name|BackupAdminImpl
name|admin
init|=
operator|new
name|BackupAdminImpl
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|boolean
name|result
init|=
name|admin
operator|.
name|deleteBackupSet
argument_list|(
name|setName
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Delete set "
operator|+
name|setName
operator|+
literal|" OK."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Set "
operator|+
name|setName
operator|+
literal|" does not exist"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|processSetRemove
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|==
literal|null
operator|||
name|args
operator|.
name|length
operator|!=
literal|4
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
name|super
operator|.
name|execute
argument_list|()
expr_stmt|;
name|String
name|setName
init|=
name|args
index|[
literal|2
index|]
decl_stmt|;
name|String
index|[]
name|tables
init|=
name|args
index|[
literal|3
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|TableName
index|[]
name|tableNames
init|=
name|toTableNames
argument_list|(
name|tables
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|BackupAdminImpl
name|admin
init|=
operator|new
name|BackupAdminImpl
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|admin
operator|.
name|removeFromBackupSet
argument_list|(
name|setName
argument_list|,
name|tableNames
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|TableName
index|[]
name|toTableNames
parameter_list|(
name|String
index|[]
name|tables
parameter_list|)
block|{
name|TableName
index|[]
name|arr
init|=
operator|new
name|TableName
index|[
name|tables
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|arr
index|[
name|i
index|]
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tables
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|arr
return|;
block|}
specifier|private
name|void
name|processSetAdd
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|==
literal|null
operator|||
name|args
operator|.
name|length
operator|!=
literal|4
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
name|super
operator|.
name|execute
argument_list|()
expr_stmt|;
name|String
name|setName
init|=
name|args
index|[
literal|2
index|]
decl_stmt|;
name|String
index|[]
name|tables
init|=
name|args
index|[
literal|3
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|TableName
index|[]
name|tableNames
init|=
operator|new
name|TableName
index|[
name|tables
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tableNames
index|[
name|i
index|]
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tables
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
try|try
init|(
specifier|final
name|BackupAdminImpl
name|admin
init|=
operator|new
name|BackupAdminImpl
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|admin
operator|.
name|addToBackupSet
argument_list|(
name|setName
argument_list|,
name|tableNames
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|BackupCommand
name|getCommand
parameter_list|(
name|String
name|cmdStr
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|cmdStr
condition|)
block|{
case|case
name|SET_ADD_CMD
case|:
return|return
name|BackupCommand
operator|.
name|SET_ADD
return|;
case|case
name|SET_REMOVE_CMD
case|:
return|return
name|BackupCommand
operator|.
name|SET_REMOVE
return|;
case|case
name|SET_DELETE_CMD
case|:
return|return
name|BackupCommand
operator|.
name|SET_DELETE
return|;
case|case
name|SET_DESCRIBE_CMD
case|:
return|return
name|BackupCommand
operator|.
name|SET_DESCRIBE
return|;
case|case
name|SET_LIST_CMD
case|:
return|return
name|BackupCommand
operator|.
name|SET_LIST
return|;
default|default:
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: Unknown command for 'set' :"
operator|+
name|cmdStr
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INCORRECT_USAGE
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|SET_CMD_USAGE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

