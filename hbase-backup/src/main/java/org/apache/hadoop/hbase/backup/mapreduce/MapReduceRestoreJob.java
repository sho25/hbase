begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|util
operator|.
name|BackupUtils
operator|.
name|failed
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|util
operator|.
name|BackupUtils
operator|.
name|succeeded
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|RestoreJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|util
operator|.
name|BackupUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|LoadIncrementalHFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_comment
comment|/**  * MapReduce implementation of {@link RestoreJob}  *  * For backup restore, it runs {@link MapReduceHFileSplitterJob} job and creates  * HFiles which are aligned with a region boundaries of a table being  * restored.  *  * The resulting HFiles then are loaded using HBase bulk load tool  * {@link LoadIncrementalHFiles}  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MapReduceRestoreJob
implements|implements
name|RestoreJob
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MapReduceRestoreJob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Tool
name|player
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|MapReduceRestoreJob
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|Path
index|[]
name|dirPaths
parameter_list|,
name|TableName
index|[]
name|tableNames
parameter_list|,
name|TableName
index|[]
name|newTableNames
parameter_list|,
name|boolean
name|fullBackupRestore
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|bulkOutputConfKey
decl_stmt|;
name|player
operator|=
operator|new
name|MapReduceHFileSplitterJob
argument_list|()
expr_stmt|;
name|bulkOutputConfKey
operator|=
name|MapReduceHFileSplitterJob
operator|.
name|BULK_OUTPUT_CONF_KEY
expr_stmt|;
comment|// Player reads all files in arbitrary directory structure and creates
comment|// a Map task for each file
name|String
name|dirs
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|dirPaths
argument_list|,
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Restore "
operator|+
operator|(
name|fullBackupRestore
condition|?
literal|"full"
else|:
literal|"incremental"
operator|)
operator|+
literal|" backup from directory "
operator|+
name|dirs
operator|+
literal|" from hbase tables "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|tableNames
argument_list|,
name|BackupRestoreConstants
operator|.
name|TABLENAME_DELIMITER_IN_COMMAND
argument_list|)
operator|+
literal|" to tables "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|newTableNames
argument_list|,
name|BackupRestoreConstants
operator|.
name|TABLENAME_DELIMITER_IN_COMMAND
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Restore "
operator|+
name|tableNames
index|[
name|i
index|]
operator|+
literal|" into "
operator|+
name|newTableNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|Path
name|bulkOutputPath
init|=
name|BackupUtils
operator|.
name|getBulkOutputDir
argument_list|(
name|BackupUtils
operator|.
name|getFileNameCompatibleString
argument_list|(
name|newTableNames
index|[
name|i
index|]
argument_list|)
argument_list|,
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|bulkOutputConfKey
argument_list|,
name|bulkOutputPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|playerArgs
init|=
block|{
name|dirs
block|,
name|fullBackupRestore
operator|?
name|newTableNames
index|[
name|i
index|]
operator|.
name|getNameAsString
argument_list|()
operator|:
name|tableNames
index|[
name|i
index|]
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|int
name|result
init|=
literal|0
decl_stmt|;
name|int
name|loaderResult
init|=
literal|0
decl_stmt|;
try|try
block|{
name|player
operator|.
name|setConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|player
operator|.
name|run
argument_list|(
name|playerArgs
argument_list|)
expr_stmt|;
if|if
condition|(
name|succeeded
argument_list|(
name|result
argument_list|)
condition|)
block|{
comment|// do bulk load
name|LoadIncrementalHFiles
name|loader
init|=
name|BackupUtils
operator|.
name|createLoader
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Restoring HFiles from directory "
operator|+
name|bulkOutputPath
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|args
init|=
block|{
name|bulkOutputPath
operator|.
name|toString
argument_list|()
block|,
name|newTableNames
index|[
name|i
index|]
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|loaderResult
operator|=
name|loader
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|failed
argument_list|(
name|loaderResult
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can not restore from backup directory "
operator|+
name|dirs
operator|+
literal|" (check Hadoop and HBase logs). Bulk loader return code ="
operator|+
name|loaderResult
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can not restore from backup directory "
operator|+
name|dirs
operator|+
literal|" (check Hadoop/MR and HBase logs). Player return code ="
operator|+
name|result
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Restore Job finished:"
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can not restore from backup directory "
operator|+
name|dirs
operator|+
literal|" (check Hadoop and HBase logs) "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
block|}
end_class

end_unit

