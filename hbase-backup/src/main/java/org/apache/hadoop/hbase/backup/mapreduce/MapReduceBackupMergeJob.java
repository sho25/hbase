begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|util
operator|.
name|BackupUtils
operator|.
name|succeeded
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupMergeJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|HBackupFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
operator|.
name|BackupManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
operator|.
name|BackupSystemTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|util
operator|.
name|BackupUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_comment
comment|/**  * MapReduce implementation of {@link BackupMergeJob}  * Must be initialized with configuration of a backup destination cluster  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MapReduceBackupMergeJob
implements|implements
name|BackupMergeJob
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MapReduceBackupMergeJob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|Tool
name|player
decl_stmt|;
specifier|protected
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|MapReduceBackupMergeJob
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|String
index|[]
name|backupIds
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|bulkOutputConfKey
decl_stmt|;
comment|// TODO : run player on remote cluster
name|player
operator|=
operator|new
name|MapReduceHFileSplitterJob
argument_list|()
expr_stmt|;
name|bulkOutputConfKey
operator|=
name|MapReduceHFileSplitterJob
operator|.
name|BULK_OUTPUT_CONF_KEY
expr_stmt|;
comment|// Player reads all files in arbitrary directory structure and creates
comment|// a Map task for each file
name|String
name|bids
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|backupIds
argument_list|,
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Merge backup images "
operator|+
name|bids
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Pair
argument_list|<
name|TableName
argument_list|,
name|Path
argument_list|>
argument_list|>
name|processedTableList
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|TableName
argument_list|,
name|Path
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|finishedTables
init|=
literal|false
decl_stmt|;
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|BackupSystemTable
name|table
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Get exclusive lock on backup system
name|table
operator|.
name|startBackupExclusiveOperation
argument_list|()
expr_stmt|;
comment|// Start merge operation
name|table
operator|.
name|startMergeOperation
argument_list|(
name|backupIds
argument_list|)
expr_stmt|;
comment|// Select most recent backup id
name|String
name|mergedBackupId
init|=
name|findMostRecentBackupId
argument_list|(
name|backupIds
argument_list|)
decl_stmt|;
name|TableName
index|[]
name|tableNames
init|=
name|getTableNamesInBackupImages
argument_list|(
name|backupIds
argument_list|)
decl_stmt|;
name|String
name|backupRoot
init|=
literal|null
decl_stmt|;
name|BackupInfo
name|bInfo
init|=
name|table
operator|.
name|readBackupInfo
argument_list|(
name|backupIds
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|backupRoot
operator|=
name|bInfo
operator|.
name|getBackupRootDir
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Merge backup images for "
operator|+
name|tableNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// Find input directories for table
name|Path
index|[]
name|dirPaths
init|=
name|findInputDirectories
argument_list|(
name|fs
argument_list|,
name|backupRoot
argument_list|,
name|tableNames
index|[
name|i
index|]
argument_list|,
name|backupIds
argument_list|)
decl_stmt|;
name|String
name|dirs
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|dirPaths
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|Path
name|bulkOutputPath
init|=
name|BackupUtils
operator|.
name|getBulkOutputDir
argument_list|(
name|BackupUtils
operator|.
name|getFileNameCompatibleString
argument_list|(
name|tableNames
index|[
name|i
index|]
argument_list|)
argument_list|,
name|getConf
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Delete content if exists
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|bulkOutputPath
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|bulkOutputPath
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can not delete: "
operator|+
name|bulkOutputPath
argument_list|)
expr_stmt|;
block|}
block|}
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|bulkOutputConfKey
argument_list|,
name|bulkOutputPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|playerArgs
init|=
block|{
name|dirs
block|,
name|tableNames
index|[
name|i
index|]
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|int
name|result
init|=
literal|0
decl_stmt|;
name|player
operator|.
name|setConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|player
operator|.
name|run
argument_list|(
name|playerArgs
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|succeeded
argument_list|(
name|result
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can not merge backup images for "
operator|+
name|dirs
operator|+
literal|" (check Hadoop/MR and HBase logs). Player return code ="
operator|+
name|result
argument_list|)
throw|;
block|}
comment|// Add to processed table list
name|processedTableList
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|TableName
argument_list|,
name|Path
argument_list|>
argument_list|(
name|tableNames
index|[
name|i
index|]
argument_list|,
name|bulkOutputPath
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Merge Job finished:"
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|TableName
argument_list|>
name|tableList
init|=
name|toTableNameList
argument_list|(
name|processedTableList
argument_list|)
decl_stmt|;
name|table
operator|.
name|updateProcessedTablesForMerge
argument_list|(
name|tableList
argument_list|)
expr_stmt|;
name|finishedTables
operator|=
literal|true
expr_stmt|;
comment|// Move data
for|for
control|(
name|Pair
argument_list|<
name|TableName
argument_list|,
name|Path
argument_list|>
name|tn
range|:
name|processedTableList
control|)
block|{
name|moveData
argument_list|(
name|fs
argument_list|,
name|backupRoot
argument_list|,
name|tn
operator|.
name|getSecond
argument_list|()
argument_list|,
name|tn
operator|.
name|getFirst
argument_list|()
argument_list|,
name|mergedBackupId
argument_list|)
expr_stmt|;
block|}
comment|// Delete old data and update manifest
name|List
argument_list|<
name|String
argument_list|>
name|backupsToDelete
init|=
name|getBackupIdsToDelete
argument_list|(
name|backupIds
argument_list|,
name|mergedBackupId
argument_list|)
decl_stmt|;
name|deleteBackupImages
argument_list|(
name|backupsToDelete
argument_list|,
name|conn
argument_list|,
name|fs
argument_list|,
name|backupRoot
argument_list|)
expr_stmt|;
name|updateBackupManifest
argument_list|(
name|backupRoot
argument_list|,
name|mergedBackupId
argument_list|,
name|backupsToDelete
argument_list|)
expr_stmt|;
comment|// Finish merge session
name|table
operator|.
name|finishMergeOperation
argument_list|()
expr_stmt|;
comment|// Release lock
name|table
operator|.
name|finishBackupExclusiveOperation
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|finishedTables
condition|)
block|{
comment|// cleanup bulk directories and finish merge
comment|// merge MUST be repeated (no need for repair)
name|cleanupBulkLoadDirs
argument_list|(
name|fs
argument_list|,
name|toPathList
argument_list|(
name|processedTableList
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|finishMergeOperation
argument_list|()
expr_stmt|;
name|table
operator|.
name|finishBackupExclusiveOperation
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Backup merge operation failed, you should try it again"
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
comment|// backup repair must be run
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Backup merge operation failed, run backup repair tool to restore system's integrity"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|List
argument_list|<
name|Path
argument_list|>
name|toPathList
parameter_list|(
name|List
argument_list|<
name|Pair
argument_list|<
name|TableName
argument_list|,
name|Path
argument_list|>
argument_list|>
name|processedTableList
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|TableName
argument_list|,
name|Path
argument_list|>
name|p
range|:
name|processedTableList
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|p
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|protected
name|List
argument_list|<
name|TableName
argument_list|>
name|toTableNameList
parameter_list|(
name|List
argument_list|<
name|Pair
argument_list|<
name|TableName
argument_list|,
name|Path
argument_list|>
argument_list|>
name|processedTableList
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|TableName
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|TableName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|TableName
argument_list|,
name|Path
argument_list|>
name|p
range|:
name|processedTableList
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|p
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|protected
name|void
name|cleanupBulkLoadDirs
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|pathList
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Path
name|path
range|:
name|pathList
control|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can't delete "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|updateBackupManifest
parameter_list|(
name|String
name|backupRoot
parameter_list|,
name|String
name|mergedBackupId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|backupsToDelete
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IOException
block|{
name|BackupManifest
name|manifest
init|=
name|HBackupFileSystem
operator|.
name|getManifest
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|backupRoot
argument_list|)
argument_list|,
name|mergedBackupId
argument_list|)
decl_stmt|;
name|manifest
operator|.
name|getBackupImage
argument_list|()
operator|.
name|removeAncestors
argument_list|(
name|backupsToDelete
argument_list|)
expr_stmt|;
comment|// save back
name|manifest
operator|.
name|store
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|deleteBackupImages
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|backupIds
parameter_list|,
name|Connection
name|conn
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|String
name|backupRoot
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Delete from backup system table
try|try
init|(
name|BackupSystemTable
name|table
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
init|)
block|{
for|for
control|(
name|String
name|backupId
range|:
name|backupIds
control|)
block|{
name|table
operator|.
name|deleteBackupInfo
argument_list|(
name|backupId
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Delete from file system
for|for
control|(
name|String
name|backupId
range|:
name|backupIds
control|)
block|{
name|Path
name|backupDirPath
init|=
name|HBackupFileSystem
operator|.
name|getBackupPath
argument_list|(
name|backupRoot
argument_list|,
name|backupId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|backupDirPath
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not delete "
operator|+
name|backupDirPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getBackupIdsToDelete
parameter_list|(
name|String
index|[]
name|backupIds
parameter_list|,
name|String
name|mergedBackupId
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|backupIds
control|)
block|{
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|mergedBackupId
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|list
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|protected
name|void
name|moveData
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|backupRoot
parameter_list|,
name|Path
name|bulkOutputPath
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|String
name|mergedBackupId
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IOException
block|{
name|Path
name|dest
init|=
operator|new
name|Path
argument_list|(
name|HBackupFileSystem
operator|.
name|getTableBackupDataDir
argument_list|(
name|backupRoot
argument_list|,
name|mergedBackupId
argument_list|,
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
comment|// Delete all in dest
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|dest
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not delete "
operator|+
name|dest
argument_list|)
throw|;
block|}
name|FileStatus
index|[]
name|fsts
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|bulkOutputPath
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|fst
range|:
name|fsts
control|)
block|{
if|if
condition|(
name|fst
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|fs
operator|.
name|rename
argument_list|(
name|fst
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|String
name|findMostRecentBackupId
parameter_list|(
name|String
index|[]
name|backupIds
parameter_list|)
block|{
name|long
name|recentTimestamp
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|String
name|backupId
range|:
name|backupIds
control|)
block|{
name|long
name|ts
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|backupId
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|>
name|recentTimestamp
condition|)
block|{
name|recentTimestamp
operator|=
name|ts
expr_stmt|;
block|}
block|}
return|return
name|BackupRestoreConstants
operator|.
name|BACKUPID_PREFIX
operator|+
name|recentTimestamp
return|;
block|}
specifier|protected
name|TableName
index|[]
name|getTableNamesInBackupImages
parameter_list|(
name|String
index|[]
name|backupIds
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|TableName
argument_list|>
name|allSet
init|=
operator|new
name|HashSet
argument_list|<
name|TableName
argument_list|>
argument_list|()
decl_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|BackupSystemTable
name|table
operator|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
init|)
block|{
for|for
control|(
name|String
name|backupId
range|:
name|backupIds
control|)
block|{
name|BackupInfo
name|bInfo
init|=
name|table
operator|.
name|readBackupInfo
argument_list|(
name|backupId
argument_list|)
decl_stmt|;
name|allSet
operator|.
name|addAll
argument_list|(
name|bInfo
operator|.
name|getTableNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|TableName
index|[]
name|ret
init|=
operator|new
name|TableName
index|[
name|allSet
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
name|allSet
operator|.
name|toArray
argument_list|(
name|ret
argument_list|)
return|;
block|}
specifier|protected
name|Path
index|[]
name|findInputDirectories
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|backupRoot
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|String
index|[]
name|backupIds
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|dirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|backupId
range|:
name|backupIds
control|)
block|{
name|Path
name|fileBackupDirPath
init|=
operator|new
name|Path
argument_list|(
name|HBackupFileSystem
operator|.
name|getTableBackupDataDir
argument_list|(
name|backupRoot
argument_list|,
name|backupId
argument_list|,
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|fileBackupDirPath
argument_list|)
condition|)
block|{
name|dirs
operator|.
name|add
argument_list|(
name|fileBackupDirPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"File: "
operator|+
name|fileBackupDirPath
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Path
index|[]
name|ret
init|=
operator|new
name|Path
index|[
name|dirs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
name|dirs
operator|.
name|toArray
argument_list|(
name|ret
argument_list|)
return|;
block|}
block|}
end_class

end_unit

