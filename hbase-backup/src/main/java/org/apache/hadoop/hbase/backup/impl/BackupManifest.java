begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|HBackupFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|util
operator|.
name|BackupUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|BackupProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_comment
comment|/**  * Backup manifest contains all the meta data of a backup image. The manifest info will be bundled  * as manifest file together with data. So that each backup image will contain all the info needed  * for restore. BackupManifest is a storage container for BackupImage.  * It is responsible for storing/reading backup image data and has some additional utility methods.  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|BackupManifest
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BackupManifest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// manifest file name
specifier|public
specifier|static
specifier|final
name|String
name|MANIFEST_FILE_NAME
init|=
literal|".backup.manifest"
decl_stmt|;
comment|/**    * Backup image, the dependency graph is made up by series of backup images BackupImage contains    * all the relevant information to restore the backup and is used during restore operation    */
specifier|public
specifier|static
class|class
name|BackupImage
implements|implements
name|Comparable
argument_list|<
name|BackupImage
argument_list|>
block|{
specifier|static
class|class
name|Builder
block|{
name|BackupImage
name|image
decl_stmt|;
name|Builder
parameter_list|()
block|{
name|image
operator|=
operator|new
name|BackupImage
argument_list|()
expr_stmt|;
block|}
name|Builder
name|withBackupId
parameter_list|(
name|String
name|backupId
parameter_list|)
block|{
name|image
operator|.
name|setBackupId
argument_list|(
name|backupId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|Builder
name|withType
parameter_list|(
name|BackupType
name|type
parameter_list|)
block|{
name|image
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|Builder
name|withRootDir
parameter_list|(
name|String
name|rootDir
parameter_list|)
block|{
name|image
operator|.
name|setRootDir
argument_list|(
name|rootDir
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|Builder
name|withTableList
parameter_list|(
name|List
argument_list|<
name|TableName
argument_list|>
name|tableList
parameter_list|)
block|{
name|image
operator|.
name|setTableList
argument_list|(
name|tableList
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|Builder
name|withStartTime
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{
name|image
operator|.
name|setStartTs
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|Builder
name|withCompleteTime
parameter_list|(
name|long
name|completeTime
parameter_list|)
block|{
name|image
operator|.
name|setCompleteTs
argument_list|(
name|completeTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|BackupImage
name|build
parameter_list|()
block|{
return|return
name|image
return|;
block|}
block|}
specifier|private
name|String
name|backupId
decl_stmt|;
specifier|private
name|BackupType
name|type
decl_stmt|;
specifier|private
name|String
name|rootDir
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TableName
argument_list|>
name|tableList
decl_stmt|;
specifier|private
name|long
name|startTs
decl_stmt|;
specifier|private
name|long
name|completeTs
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|BackupImage
argument_list|>
name|ancestors
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|incrTimeRanges
decl_stmt|;
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
specifier|public
name|BackupImage
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|private
name|BackupImage
parameter_list|(
name|String
name|backupId
parameter_list|,
name|BackupType
name|type
parameter_list|,
name|String
name|rootDir
parameter_list|,
name|List
argument_list|<
name|TableName
argument_list|>
name|tableList
parameter_list|,
name|long
name|startTs
parameter_list|,
name|long
name|completeTs
parameter_list|)
block|{
name|this
operator|.
name|backupId
operator|=
name|backupId
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|rootDir
operator|=
name|rootDir
expr_stmt|;
name|this
operator|.
name|tableList
operator|=
name|tableList
expr_stmt|;
name|this
operator|.
name|startTs
operator|=
name|startTs
expr_stmt|;
name|this
operator|.
name|completeTs
operator|=
name|completeTs
expr_stmt|;
block|}
specifier|static
name|BackupImage
name|fromProto
parameter_list|(
name|BackupProtos
operator|.
name|BackupImage
name|im
parameter_list|)
block|{
name|String
name|backupId
init|=
name|im
operator|.
name|getBackupId
argument_list|()
decl_stmt|;
name|String
name|rootDir
init|=
name|im
operator|.
name|getBackupRootDir
argument_list|()
decl_stmt|;
name|long
name|startTs
init|=
name|im
operator|.
name|getStartTs
argument_list|()
decl_stmt|;
name|long
name|completeTs
init|=
name|im
operator|.
name|getCompleteTs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HBaseProtos
operator|.
name|TableName
argument_list|>
name|tableListList
init|=
name|im
operator|.
name|getTableListList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TableName
argument_list|>
name|tableList
init|=
operator|new
name|ArrayList
argument_list|<
name|TableName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|TableName
name|tn
range|:
name|tableListList
control|)
block|{
name|tableList
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|tn
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|BackupProtos
operator|.
name|BackupImage
argument_list|>
name|ancestorList
init|=
name|im
operator|.
name|getAncestorsList
argument_list|()
decl_stmt|;
name|BackupType
name|type
init|=
name|im
operator|.
name|getBackupType
argument_list|()
operator|==
name|BackupProtos
operator|.
name|BackupType
operator|.
name|FULL
condition|?
name|BackupType
operator|.
name|FULL
else|:
name|BackupType
operator|.
name|INCREMENTAL
decl_stmt|;
name|BackupImage
name|image
init|=
operator|new
name|BackupImage
argument_list|(
name|backupId
argument_list|,
name|type
argument_list|,
name|rootDir
argument_list|,
name|tableList
argument_list|,
name|startTs
argument_list|,
name|completeTs
argument_list|)
decl_stmt|;
for|for
control|(
name|BackupProtos
operator|.
name|BackupImage
name|img
range|:
name|ancestorList
control|)
block|{
name|image
operator|.
name|addAncestor
argument_list|(
name|fromProto
argument_list|(
name|img
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|image
operator|.
name|setIncrTimeRanges
argument_list|(
name|loadIncrementalTimestampMap
argument_list|(
name|im
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|image
return|;
block|}
name|BackupProtos
operator|.
name|BackupImage
name|toProto
parameter_list|()
block|{
name|BackupProtos
operator|.
name|BackupImage
operator|.
name|Builder
name|builder
init|=
name|BackupProtos
operator|.
name|BackupImage
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setBackupId
argument_list|(
name|backupId
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setCompleteTs
argument_list|(
name|completeTs
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setStartTs
argument_list|(
name|startTs
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setBackupRootDir
argument_list|(
name|rootDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|BackupType
operator|.
name|FULL
condition|)
block|{
name|builder
operator|.
name|setBackupType
argument_list|(
name|BackupProtos
operator|.
name|BackupType
operator|.
name|FULL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|setBackupType
argument_list|(
name|BackupProtos
operator|.
name|BackupType
operator|.
name|INCREMENTAL
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TableName
name|name
range|:
name|tableList
control|)
block|{
name|builder
operator|.
name|addTableList
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ancestors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BackupImage
name|im
range|:
name|ancestors
control|)
block|{
name|builder
operator|.
name|addAncestors
argument_list|(
name|im
operator|.
name|toProto
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|setIncrementalTimestampMap
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|loadIncrementalTimestampMap
parameter_list|(
name|BackupProtos
operator|.
name|BackupImage
name|proto
parameter_list|)
block|{
name|List
argument_list|<
name|BackupProtos
operator|.
name|TableServerTimestamp
argument_list|>
name|list
init|=
name|proto
operator|.
name|getTstMapList
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|incrTimeRanges
init|=
operator|new
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
name|incrTimeRanges
return|;
for|for
control|(
name|BackupProtos
operator|.
name|TableServerTimestamp
name|tst
range|:
name|list
control|)
block|{
name|TableName
name|tn
init|=
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|tst
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|map
init|=
name|incrTimeRanges
operator|.
name|get
argument_list|(
name|tn
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|incrTimeRanges
operator|.
name|put
argument_list|(
name|tn
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|BackupProtos
operator|.
name|ServerTimestamp
argument_list|>
name|listSt
init|=
name|tst
operator|.
name|getServerTimestampList
argument_list|()
decl_stmt|;
for|for
control|(
name|BackupProtos
operator|.
name|ServerTimestamp
name|stm
range|:
name|listSt
control|)
block|{
name|ServerName
name|sn
init|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|stm
operator|.
name|getServerName
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|sn
operator|.
name|getHostname
argument_list|()
operator|+
literal|":"
operator|+
name|sn
operator|.
name|getPort
argument_list|()
argument_list|,
name|stm
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|incrTimeRanges
return|;
block|}
specifier|private
name|void
name|setIncrementalTimestampMap
parameter_list|(
name|BackupProtos
operator|.
name|BackupImage
operator|.
name|Builder
name|builder
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|incrTimeRanges
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Entry
argument_list|<
name|TableName
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|entry
range|:
name|this
operator|.
name|incrTimeRanges
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TableName
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|BackupProtos
operator|.
name|TableServerTimestamp
operator|.
name|Builder
name|tstBuilder
init|=
name|BackupProtos
operator|.
name|TableServerTimestamp
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|tstBuilder
operator|.
name|setTableName
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry2
range|:
name|value
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|s
init|=
name|entry2
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|BackupProtos
operator|.
name|ServerTimestamp
operator|.
name|Builder
name|stBuilder
init|=
name|BackupProtos
operator|.
name|ServerTimestamp
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|HBaseProtos
operator|.
name|ServerName
operator|.
name|Builder
name|snBuilder
init|=
name|HBaseProtos
operator|.
name|ServerName
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ServerName
name|sn
init|=
name|ServerName
operator|.
name|parseServerName
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|snBuilder
operator|.
name|setHostName
argument_list|(
name|sn
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|snBuilder
operator|.
name|setPort
argument_list|(
name|sn
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|stBuilder
operator|.
name|setServerName
argument_list|(
name|snBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|stBuilder
operator|.
name|setTimestamp
argument_list|(
name|entry2
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|tstBuilder
operator|.
name|addServerTimestamp
argument_list|(
name|stBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addTstMap
argument_list|(
name|tstBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getBackupId
parameter_list|()
block|{
return|return
name|backupId
return|;
block|}
specifier|private
name|void
name|setBackupId
parameter_list|(
name|String
name|backupId
parameter_list|)
block|{
name|this
operator|.
name|backupId
operator|=
name|backupId
expr_stmt|;
block|}
specifier|public
name|BackupType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|private
name|void
name|setType
parameter_list|(
name|BackupType
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|String
name|getRootDir
parameter_list|()
block|{
return|return
name|rootDir
return|;
block|}
specifier|private
name|void
name|setRootDir
parameter_list|(
name|String
name|rootDir
parameter_list|)
block|{
name|this
operator|.
name|rootDir
operator|=
name|rootDir
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TableName
argument_list|>
name|getTableNames
parameter_list|()
block|{
return|return
name|tableList
return|;
block|}
specifier|private
name|void
name|setTableList
parameter_list|(
name|List
argument_list|<
name|TableName
argument_list|>
name|tableList
parameter_list|)
block|{
name|this
operator|.
name|tableList
operator|=
name|tableList
expr_stmt|;
block|}
specifier|public
name|long
name|getStartTs
parameter_list|()
block|{
return|return
name|startTs
return|;
block|}
specifier|private
name|void
name|setStartTs
parameter_list|(
name|long
name|startTs
parameter_list|)
block|{
name|this
operator|.
name|startTs
operator|=
name|startTs
expr_stmt|;
block|}
specifier|public
name|long
name|getCompleteTs
parameter_list|()
block|{
return|return
name|completeTs
return|;
block|}
specifier|private
name|void
name|setCompleteTs
parameter_list|(
name|long
name|completeTs
parameter_list|)
block|{
name|this
operator|.
name|completeTs
operator|=
name|completeTs
expr_stmt|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|BackupImage
argument_list|>
name|getAncestors
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|ancestors
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|ancestors
operator|=
operator|new
name|ArrayList
argument_list|<
name|BackupImage
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|ancestors
return|;
block|}
specifier|public
name|void
name|removeAncestors
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|backupIds
parameter_list|)
block|{
name|List
argument_list|<
name|BackupImage
argument_list|>
name|toRemove
init|=
operator|new
name|ArrayList
argument_list|<
name|BackupImage
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BackupImage
name|im
range|:
name|this
operator|.
name|ancestors
control|)
block|{
if|if
condition|(
name|backupIds
operator|.
name|contains
argument_list|(
name|im
operator|.
name|getBackupId
argument_list|()
argument_list|)
condition|)
block|{
name|toRemove
operator|.
name|add
argument_list|(
name|im
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|ancestors
operator|.
name|removeAll
argument_list|(
name|toRemove
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addAncestor
parameter_list|(
name|BackupImage
name|backupImage
parameter_list|)
block|{
name|this
operator|.
name|getAncestors
argument_list|()
operator|.
name|add
argument_list|(
name|backupImage
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasAncestor
parameter_list|(
name|String
name|token
parameter_list|)
block|{
for|for
control|(
name|BackupImage
name|image
range|:
name|this
operator|.
name|getAncestors
argument_list|()
control|)
block|{
if|if
condition|(
name|image
operator|.
name|getBackupId
argument_list|()
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasTable
parameter_list|(
name|TableName
name|table
parameter_list|)
block|{
return|return
name|tableList
operator|.
name|contains
argument_list|(
name|table
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|BackupImage
name|other
parameter_list|)
block|{
name|String
name|thisBackupId
init|=
name|this
operator|.
name|getBackupId
argument_list|()
decl_stmt|;
name|String
name|otherBackupId
init|=
name|other
operator|.
name|getBackupId
argument_list|()
decl_stmt|;
name|int
name|index1
init|=
name|thisBackupId
operator|.
name|lastIndexOf
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
name|int
name|index2
init|=
name|otherBackupId
operator|.
name|lastIndexOf
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
name|String
name|name1
init|=
name|thisBackupId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index1
argument_list|)
decl_stmt|;
name|String
name|name2
init|=
name|otherBackupId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index2
argument_list|)
decl_stmt|;
if|if
condition|(
name|name1
operator|.
name|equals
argument_list|(
name|name2
argument_list|)
condition|)
block|{
name|Long
name|thisTS
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|thisBackupId
operator|.
name|substring
argument_list|(
name|index1
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Long
name|otherTS
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|otherBackupId
operator|.
name|substring
argument_list|(
name|index2
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|thisTS
operator|.
name|compareTo
argument_list|(
name|otherTS
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|name1
operator|.
name|compareTo
argument_list|(
name|name2
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|BackupImage
condition|)
block|{
return|return
name|this
operator|.
name|compareTo
argument_list|(
operator|(
name|BackupImage
operator|)
name|obj
argument_list|)
operator|==
literal|0
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
literal|33
operator|*
name|this
operator|.
name|getBackupId
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|+
name|type
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|hash
operator|=
literal|33
operator|*
name|hash
operator|+
name|rootDir
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hash
operator|=
literal|33
operator|*
name|hash
operator|+
name|Long
operator|.
name|valueOf
argument_list|(
name|startTs
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hash
operator|=
literal|33
operator|*
name|hash
operator|+
name|Long
operator|.
name|valueOf
argument_list|(
name|completeTs
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
for|for
control|(
name|TableName
name|table
range|:
name|tableList
control|)
block|{
name|hash
operator|=
literal|33
operator|*
name|hash
operator|+
name|table
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|hash
return|;
block|}
specifier|public
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|getIncrTimeRanges
parameter_list|()
block|{
return|return
name|incrTimeRanges
return|;
block|}
specifier|private
name|void
name|setIncrTimeRanges
parameter_list|(
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|incrTimeRanges
parameter_list|)
block|{
name|this
operator|.
name|incrTimeRanges
operator|=
name|incrTimeRanges
expr_stmt|;
block|}
block|}
comment|// backup image directory
specifier|private
name|String
name|tableBackupDir
init|=
literal|null
decl_stmt|;
specifier|private
name|BackupImage
name|backupImage
decl_stmt|;
comment|/**    * Construct manifest for a ongoing backup.    * @param backup The ongoing backup info    */
specifier|public
name|BackupManifest
parameter_list|(
name|BackupInfo
name|backup
parameter_list|)
block|{
name|BackupImage
operator|.
name|Builder
name|builder
init|=
name|BackupImage
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|this
operator|.
name|backupImage
operator|=
name|builder
operator|.
name|withBackupId
argument_list|(
name|backup
operator|.
name|getBackupId
argument_list|()
argument_list|)
operator|.
name|withType
argument_list|(
name|backup
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|withRootDir
argument_list|(
name|backup
operator|.
name|getBackupRootDir
argument_list|()
argument_list|)
operator|.
name|withTableList
argument_list|(
name|backup
operator|.
name|getTableNames
argument_list|()
argument_list|)
operator|.
name|withStartTime
argument_list|(
name|backup
operator|.
name|getStartTs
argument_list|()
argument_list|)
operator|.
name|withCompleteTime
argument_list|(
name|backup
operator|.
name|getCompleteTs
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|/**    * Construct a table level manifest for a backup of the named table.    * @param backup The ongoing backup session info    */
specifier|public
name|BackupManifest
parameter_list|(
name|BackupInfo
name|backup
parameter_list|,
name|TableName
name|table
parameter_list|)
block|{
name|this
operator|.
name|tableBackupDir
operator|=
name|backup
operator|.
name|getTableBackupDir
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TableName
argument_list|>
name|tables
init|=
operator|new
name|ArrayList
argument_list|<
name|TableName
argument_list|>
argument_list|()
decl_stmt|;
name|tables
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|BackupImage
operator|.
name|Builder
name|builder
init|=
name|BackupImage
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|this
operator|.
name|backupImage
operator|=
name|builder
operator|.
name|withBackupId
argument_list|(
name|backup
operator|.
name|getBackupId
argument_list|()
argument_list|)
operator|.
name|withType
argument_list|(
name|backup
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|withRootDir
argument_list|(
name|backup
operator|.
name|getBackupRootDir
argument_list|()
argument_list|)
operator|.
name|withTableList
argument_list|(
name|tables
argument_list|)
operator|.
name|withStartTime
argument_list|(
name|backup
operator|.
name|getStartTs
argument_list|()
argument_list|)
operator|.
name|withCompleteTime
argument_list|(
name|backup
operator|.
name|getCompleteTs
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|/**    * Construct manifest from a backup directory.    * @param conf configuration    * @param backupPath backup path    * @throws IOException    */
specifier|public
name|BackupManifest
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|backupPath
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|backupPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|,
name|backupPath
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct manifest from a backup directory.    * @param fs the FileSystem    * @param backupPath backup path    * @throws BackupException exception    */
specifier|public
name|BackupManifest
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|backupPath
parameter_list|)
throws|throws
name|BackupException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading manifest from: "
operator|+
name|backupPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// The input backupDir may not exactly be the backup table dir.
comment|// It could be the backup log dir where there is also a manifest file stored.
comment|// This variable's purpose is to keep the correct and original location so
comment|// that we can store/persist it.
try|try
block|{
name|FileStatus
index|[]
name|subFiles
init|=
name|BackupUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|backupPath
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|subFiles
operator|==
literal|null
condition|)
block|{
name|String
name|errorMsg
init|=
name|backupPath
operator|.
name|toString
argument_list|()
operator|+
literal|" does not exist"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errorMsg
argument_list|)
throw|;
block|}
for|for
control|(
name|FileStatus
name|subFile
range|:
name|subFiles
control|)
block|{
if|if
condition|(
name|subFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|MANIFEST_FILE_NAME
argument_list|)
condition|)
block|{
comment|// load and set manifest field from file content
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|subFile
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|len
init|=
name|subFile
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|byte
index|[]
name|pbBytes
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|len
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|pbBytes
argument_list|)
expr_stmt|;
name|BackupProtos
operator|.
name|BackupImage
name|proto
init|=
literal|null
decl_stmt|;
try|try
block|{
name|proto
operator|=
name|BackupProtos
operator|.
name|BackupImage
operator|.
name|parseFrom
argument_list|(
name|pbBytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BackupException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|backupImage
operator|=
name|BackupImage
operator|.
name|fromProto
argument_list|(
name|proto
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loaded manifest instance from manifest file: "
operator|+
name|BackupUtils
operator|.
name|getPath
argument_list|(
name|subFile
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|String
name|errorMsg
init|=
literal|"No manifest file found in: "
operator|+
name|backupPath
operator|.
name|toString
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errorMsg
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BackupException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|BackupType
name|getType
parameter_list|()
block|{
return|return
name|backupImage
operator|.
name|getType
argument_list|()
return|;
block|}
comment|/**    * Get the table set of this image.    * @return The table set list    */
specifier|public
name|List
argument_list|<
name|TableName
argument_list|>
name|getTableList
parameter_list|()
block|{
return|return
name|backupImage
operator|.
name|getTableNames
argument_list|()
return|;
block|}
comment|/**    * TODO: fix it. Persist the manifest file.    * @throws IOException IOException when storing the manifest file.    */
specifier|public
name|void
name|store
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|BackupException
block|{
name|byte
index|[]
name|data
init|=
name|backupImage
operator|.
name|toProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|// write the file, overwrite if already exist
name|Path
name|manifestFilePath
init|=
operator|new
name|Path
argument_list|(
name|HBackupFileSystem
operator|.
name|getBackupPath
argument_list|(
name|backupImage
operator|.
name|getRootDir
argument_list|()
argument_list|,
name|backupImage
operator|.
name|getBackupId
argument_list|()
argument_list|)
argument_list|,
name|MANIFEST_FILE_NAME
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|out
init|=
name|manifestFilePath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|create
argument_list|(
name|manifestFilePath
argument_list|,
literal|true
argument_list|)
init|;
init|)
block|{
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BackupException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Manifest file stored to "
operator|+
name|manifestFilePath
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get this backup image.    * @return the backup image.    */
specifier|public
name|BackupImage
name|getBackupImage
parameter_list|()
block|{
return|return
name|backupImage
return|;
block|}
comment|/**    * Add dependent backup image for this backup.    * @param image The direct dependent backup image    */
specifier|public
name|void
name|addDependentImage
parameter_list|(
name|BackupImage
name|image
parameter_list|)
block|{
name|this
operator|.
name|backupImage
operator|.
name|addAncestor
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the incremental timestamp map directly.    * @param incrTimestampMap timestamp map    */
specifier|public
name|void
name|setIncrTimestampMap
parameter_list|(
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|incrTimestampMap
parameter_list|)
block|{
name|this
operator|.
name|backupImage
operator|.
name|setIncrTimeRanges
argument_list|(
name|incrTimestampMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|TableName
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|getIncrTimestampMap
parameter_list|()
block|{
return|return
name|backupImage
operator|.
name|getIncrTimeRanges
argument_list|()
return|;
block|}
comment|/**    * Get the image list of this backup for restore in time order.    * @param reverse If true, then output in reverse order, otherwise in time order from old to new    * @return the backup image list for restore in time order    */
specifier|public
name|ArrayList
argument_list|<
name|BackupImage
argument_list|>
name|getRestoreDependentList
parameter_list|(
name|boolean
name|reverse
parameter_list|)
block|{
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|BackupImage
argument_list|>
name|restoreImages
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|BackupImage
argument_list|>
argument_list|()
decl_stmt|;
name|restoreImages
operator|.
name|put
argument_list|(
name|backupImage
operator|.
name|startTs
argument_list|,
name|backupImage
argument_list|)
expr_stmt|;
for|for
control|(
name|BackupImage
name|image
range|:
name|backupImage
operator|.
name|getAncestors
argument_list|()
control|)
block|{
name|restoreImages
operator|.
name|put
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|image
operator|.
name|startTs
argument_list|)
argument_list|,
name|image
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<
name|BackupImage
argument_list|>
argument_list|(
name|reverse
condition|?
operator|(
name|restoreImages
operator|.
name|descendingMap
argument_list|()
operator|.
name|values
argument_list|()
operator|)
else|:
operator|(
name|restoreImages
operator|.
name|values
argument_list|()
operator|)
argument_list|)
return|;
block|}
comment|/**    * Get the dependent image list for a specific table of this backup in time order from old to new    * if want to restore to this backup image level.    * @param table table    * @return the backup image list for a table in time order    */
specifier|public
name|ArrayList
argument_list|<
name|BackupImage
argument_list|>
name|getDependentListByTable
parameter_list|(
name|TableName
name|table
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|BackupImage
argument_list|>
name|tableImageList
init|=
operator|new
name|ArrayList
argument_list|<
name|BackupImage
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|BackupImage
argument_list|>
name|imageList
init|=
name|getRestoreDependentList
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|BackupImage
name|image
range|:
name|imageList
control|)
block|{
if|if
condition|(
name|image
operator|.
name|hasTable
argument_list|(
name|table
argument_list|)
condition|)
block|{
name|tableImageList
operator|.
name|add
argument_list|(
name|image
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|.
name|getType
argument_list|()
operator|==
name|BackupType
operator|.
name|FULL
condition|)
block|{
break|break;
block|}
block|}
block|}
name|Collections
operator|.
name|reverse
argument_list|(
name|tableImageList
argument_list|)
expr_stmt|;
return|return
name|tableImageList
return|;
block|}
comment|/**    * Get the full dependent image list in the whole dependency scope for a specific table of this    * backup in time order from old to new.    * @param table table    * @return the full backup image list for a table in time order in the whole scope of the    *         dependency of this image    */
specifier|public
name|ArrayList
argument_list|<
name|BackupImage
argument_list|>
name|getAllDependentListByTable
parameter_list|(
name|TableName
name|table
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|BackupImage
argument_list|>
name|tableImageList
init|=
operator|new
name|ArrayList
argument_list|<
name|BackupImage
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|BackupImage
argument_list|>
name|imageList
init|=
name|getRestoreDependentList
argument_list|(
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|BackupImage
name|image
range|:
name|imageList
control|)
block|{
if|if
condition|(
name|image
operator|.
name|hasTable
argument_list|(
name|table
argument_list|)
condition|)
block|{
name|tableImageList
operator|.
name|add
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tableImageList
return|;
block|}
comment|/**    * Check whether backup image1 could cover backup image2 or not.    * @param image1 backup image 1    * @param image2 backup image 2    * @return true if image1 can cover image2, otherwise false    */
specifier|public
specifier|static
name|boolean
name|canCoverImage
parameter_list|(
name|BackupImage
name|image1
parameter_list|,
name|BackupImage
name|image2
parameter_list|)
block|{
comment|// image1 can cover image2 only when the following conditions are satisfied:
comment|// - image1 must not be an incremental image;
comment|// - image1 must be taken after image2 has been taken;
comment|// - table set of image1 must cover the table set of image2.
if|if
condition|(
name|image1
operator|.
name|getType
argument_list|()
operator|==
name|BackupType
operator|.
name|INCREMENTAL
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|image1
operator|.
name|getStartTs
argument_list|()
operator|<
name|image2
operator|.
name|getStartTs
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|TableName
argument_list|>
name|image1TableList
init|=
name|image1
operator|.
name|getTableNames
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TableName
argument_list|>
name|image2TableList
init|=
name|image2
operator|.
name|getTableNames
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|image2TableList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|found
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|image1TableList
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|image2TableList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|image1TableList
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Backup image "
operator|+
name|image1
operator|.
name|getBackupId
argument_list|()
operator|+
literal|" can cover "
operator|+
name|image2
operator|.
name|getBackupId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Check whether backup image set could cover a backup image or not.    * @param fullImages The backup image set    * @param image The target backup image    * @return true if fullImages can cover image, otherwise false    */
specifier|public
specifier|static
name|boolean
name|canCoverImage
parameter_list|(
name|ArrayList
argument_list|<
name|BackupImage
argument_list|>
name|fullImages
parameter_list|,
name|BackupImage
name|image
parameter_list|)
block|{
comment|// fullImages can cover image only when the following conditions are satisfied:
comment|// - each image of fullImages must not be an incremental image;
comment|// - each image of fullImages must be taken after image has been taken;
comment|// - sum table set of fullImages must cover the table set of image.
for|for
control|(
name|BackupImage
name|image1
range|:
name|fullImages
control|)
block|{
if|if
condition|(
name|image1
operator|.
name|getType
argument_list|()
operator|==
name|BackupType
operator|.
name|INCREMENTAL
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|image1
operator|.
name|getStartTs
argument_list|()
operator|<
name|image
operator|.
name|getStartTs
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|image1TableList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BackupImage
name|image1
range|:
name|fullImages
control|)
block|{
name|List
argument_list|<
name|TableName
argument_list|>
name|tableList
init|=
name|image1
operator|.
name|getTableNames
argument_list|()
decl_stmt|;
for|for
control|(
name|TableName
name|table
range|:
name|tableList
control|)
block|{
name|image1TableList
operator|.
name|add
argument_list|(
name|table
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|image2TableList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TableName
argument_list|>
name|tableList
init|=
name|image
operator|.
name|getTableNames
argument_list|()
decl_stmt|;
for|for
control|(
name|TableName
name|table
range|:
name|tableList
control|)
block|{
name|image2TableList
operator|.
name|add
argument_list|(
name|table
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|image2TableList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|image1TableList
operator|.
name|contains
argument_list|(
name|image2TableList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Full image set can cover image "
operator|+
name|image
operator|.
name|getBackupId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|BackupInfo
name|toBackupInfo
parameter_list|()
block|{
name|BackupInfo
name|info
init|=
operator|new
name|BackupInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setType
argument_list|(
name|backupImage
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TableName
argument_list|>
name|list
init|=
name|backupImage
operator|.
name|getTableNames
argument_list|()
decl_stmt|;
name|TableName
index|[]
name|tables
init|=
operator|new
name|TableName
index|[
name|list
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|info
operator|.
name|addTables
argument_list|(
name|list
operator|.
name|toArray
argument_list|(
name|tables
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setBackupId
argument_list|(
name|backupImage
operator|.
name|getBackupId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setStartTs
argument_list|(
name|backupImage
operator|.
name|getStartTs
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setBackupRootDir
argument_list|(
name|backupImage
operator|.
name|getRootDir
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|backupImage
operator|.
name|getType
argument_list|()
operator|==
name|BackupType
operator|.
name|INCREMENTAL
condition|)
block|{
name|info
operator|.
name|setHLogTargetDir
argument_list|(
name|BackupUtils
operator|.
name|getLogBackupDir
argument_list|(
name|backupImage
operator|.
name|getRootDir
argument_list|()
argument_list|,
name|backupImage
operator|.
name|getBackupId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
block|}
end_class

end_unit

