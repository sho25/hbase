begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupInfo
operator|.
name|BackupState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupMergeJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|HBackupFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|RestoreRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|util
operator|.
name|BackupSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|util
operator|.
name|BackupUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|BackupAdminImpl
implements|implements
name|BackupAdmin
block|{
specifier|public
specifier|final
specifier|static
name|String
name|CHECK_OK
init|=
literal|"Checking backup images: OK"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|CHECK_FAILED
init|=
literal|"Checking backup images: Failed. Some dependencies are missing for restore"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BackupAdminImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Connection
name|conn
decl_stmt|;
specifier|public
name|BackupAdminImpl
parameter_list|(
name|Connection
name|conn
parameter_list|)
block|{
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|BackupInfo
name|getBackupInfo
parameter_list|(
name|String
name|backupId
parameter_list|)
throws|throws
name|IOException
block|{
name|BackupInfo
name|backupInfo
init|=
literal|null
decl_stmt|;
try|try
init|(
specifier|final
name|BackupSystemTable
name|table
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
init|)
block|{
if|if
condition|(
name|backupId
operator|==
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|BackupInfo
argument_list|>
name|recentSessions
init|=
name|table
operator|.
name|getBackupInfos
argument_list|(
name|BackupState
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
if|if
condition|(
name|recentSessions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No ongoing sessions found."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// else show status for ongoing session
comment|// must be one maximum
return|return
name|recentSessions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
name|backupInfo
operator|=
name|table
operator|.
name|readBackupInfo
argument_list|(
name|backupId
argument_list|)
expr_stmt|;
return|return
name|backupInfo
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|deleteBackups
parameter_list|(
name|String
index|[]
name|backupIds
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|totalDeleted
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|HashSet
argument_list|<
name|TableName
argument_list|>
argument_list|>
name|allTablesMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|HashSet
argument_list|<
name|TableName
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|deleteSessionStarted
init|=
literal|false
decl_stmt|;
name|boolean
name|snapshotDone
init|=
literal|false
decl_stmt|;
try|try
init|(
specifier|final
name|BackupSystemTable
name|sysTable
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
init|)
block|{
comment|// Step 1: Make sure there is no active session
comment|// is running by using startBackupSession API
comment|// If there is an active session in progress, exception will be thrown
try|try
block|{
name|sysTable
operator|.
name|startBackupExclusiveOperation
argument_list|()
expr_stmt|;
name|deleteSessionStarted
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"You can not run delete command while active backup session is in progress. \n"
operator|+
literal|"If there is no active backup session running, run backup repair utility to restore \n"
operator|+
literal|"backup system integrity."
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
comment|// Step 2: Make sure there is no failed session
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|list
init|=
name|sysTable
operator|.
name|getBackupInfos
argument_list|(
name|BackupState
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// ailed sessions found
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed backup session found. Run backup repair tool first."
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
comment|// Step 3: Record delete session
name|sysTable
operator|.
name|startDeleteOperation
argument_list|(
name|backupIds
argument_list|)
expr_stmt|;
comment|// Step 4: Snapshot backup system table
if|if
condition|(
operator|!
name|BackupSystemTable
operator|.
name|snapshotExists
argument_list|(
name|conn
argument_list|)
condition|)
block|{
name|BackupSystemTable
operator|.
name|snapshot
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Backup system table snapshot exists"
argument_list|)
expr_stmt|;
block|}
name|snapshotDone
operator|=
literal|true
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|backupIds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BackupInfo
name|info
init|=
name|sysTable
operator|.
name|readBackupInfo
argument_list|(
name|backupIds
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|String
name|rootDir
init|=
name|info
operator|.
name|getBackupRootDir
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|TableName
argument_list|>
name|allTables
init|=
name|allTablesMap
operator|.
name|get
argument_list|(
name|rootDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|allTables
operator|==
literal|null
condition|)
block|{
name|allTables
operator|=
operator|new
name|HashSet
argument_list|<
name|TableName
argument_list|>
argument_list|()
expr_stmt|;
name|allTablesMap
operator|.
name|put
argument_list|(
name|rootDir
argument_list|,
name|allTables
argument_list|)
expr_stmt|;
block|}
name|allTables
operator|.
name|addAll
argument_list|(
name|info
operator|.
name|getTableNames
argument_list|()
argument_list|)
expr_stmt|;
name|totalDeleted
operator|+=
name|deleteBackup
argument_list|(
name|backupIds
index|[
name|i
index|]
argument_list|,
name|sysTable
argument_list|)
expr_stmt|;
block|}
block|}
name|finalizeDelete
argument_list|(
name|allTablesMap
argument_list|,
name|sysTable
argument_list|)
expr_stmt|;
comment|// Finish
name|sysTable
operator|.
name|finishDeleteOperation
argument_list|()
expr_stmt|;
comment|// delete snapshot
name|BackupSystemTable
operator|.
name|deleteSnapshot
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Fail delete operation
comment|// Step 1
if|if
condition|(
name|snapshotDone
condition|)
block|{
if|if
condition|(
name|BackupSystemTable
operator|.
name|snapshotExists
argument_list|(
name|conn
argument_list|)
condition|)
block|{
name|BackupSystemTable
operator|.
name|restoreFromSnapshot
argument_list|(
name|conn
argument_list|)
expr_stmt|;
comment|// delete snapshot
name|BackupSystemTable
operator|.
name|deleteSnapshot
argument_list|(
name|conn
argument_list|)
expr_stmt|;
comment|// We still have record with unfinished delete operation
name|LOG
operator|.
name|error
argument_list|(
literal|"Delete operation failed, please run backup repair utility to restore "
operator|+
literal|"backup system integrity"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Delete operation succeeded, there were some errors: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|deleteSessionStarted
condition|)
block|{
name|sysTable
operator|.
name|finishBackupExclusiveOperation
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|totalDeleted
return|;
block|}
comment|/**    * Updates incremental backup set for every backupRoot    * @param tablesMap map [backupRoot: Set<TableName>]    * @param table backup system table    * @throws IOException    */
specifier|private
name|void
name|finalizeDelete
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|HashSet
argument_list|<
name|TableName
argument_list|>
argument_list|>
name|tablesMap
parameter_list|,
name|BackupSystemTable
name|table
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|backupRoot
range|:
name|tablesMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|TableName
argument_list|>
name|incrTableSet
init|=
name|table
operator|.
name|getIncrementalBackupTableSet
argument_list|(
name|backupRoot
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|ArrayList
argument_list|<
name|BackupInfo
argument_list|>
argument_list|>
name|tableMap
init|=
name|table
operator|.
name|getBackupHistoryForTableSet
argument_list|(
name|incrTableSet
argument_list|,
name|backupRoot
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TableName
argument_list|,
name|ArrayList
argument_list|<
name|BackupInfo
argument_list|>
argument_list|>
name|entry
range|:
name|tableMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// No more backups for a table
name|incrTableSet
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|incrTableSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|table
operator|.
name|addIncrementalBackupTableSet
argument_list|(
name|incrTableSet
argument_list|,
name|backupRoot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// empty
name|table
operator|.
name|deleteIncrementalBackupTableSet
argument_list|(
name|backupRoot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Delete single backup and all related backups<br>    * Algorithm:<br>    * Backup type: FULL or INCREMENTAL<br>    * Is this last backup session for table T: YES or NO<br>    * For every table T from table list 'tables':<br>    * if(FULL, YES) deletes only physical data (PD)<br>    * if(FULL, NO), deletes PD, scans all newer backups and removes T from backupInfo,<br>    * until we either reach the most recent backup for T in the system or FULL backup<br>    * which includes T<br>    * if(INCREMENTAL, YES) deletes only physical data (PD) if(INCREMENTAL, NO) deletes physical data    * and for table T scans all backup images between last<br>    * FULL backup, which is older than the backup being deleted and the next FULL backup (if exists)<br>    * or last one for a particular table T and removes T from list of backup tables.    * @param backupId backup id    * @param sysTable backup system table    * @return total number of deleted backup images    * @throws IOException    */
specifier|private
name|int
name|deleteBackup
parameter_list|(
name|String
name|backupId
parameter_list|,
name|BackupSystemTable
name|sysTable
parameter_list|)
throws|throws
name|IOException
block|{
name|BackupInfo
name|backupInfo
init|=
name|sysTable
operator|.
name|readBackupInfo
argument_list|(
name|backupId
argument_list|)
decl_stmt|;
name|int
name|totalDeleted
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|backupInfo
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting backup "
operator|+
name|backupInfo
operator|.
name|getBackupId
argument_list|()
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
comment|// Step 1: clean up data for backup session (idempotent)
name|BackupUtils
operator|.
name|cleanupBackupData
argument_list|(
name|backupInfo
argument_list|,
name|conn
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
comment|// List of tables in this backup;
name|List
argument_list|<
name|TableName
argument_list|>
name|tables
init|=
name|backupInfo
operator|.
name|getTableNames
argument_list|()
decl_stmt|;
name|long
name|startTime
init|=
name|backupInfo
operator|.
name|getStartTs
argument_list|()
decl_stmt|;
for|for
control|(
name|TableName
name|tn
range|:
name|tables
control|)
block|{
name|boolean
name|isLastBackupSession
init|=
name|isLastBackupSession
argument_list|(
name|sysTable
argument_list|,
name|tn
argument_list|,
name|startTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|isLastBackupSession
condition|)
block|{
continue|continue;
block|}
comment|// else
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|affectedBackups
init|=
name|getAffectedBackupSessions
argument_list|(
name|backupInfo
argument_list|,
name|tn
argument_list|,
name|sysTable
argument_list|)
decl_stmt|;
for|for
control|(
name|BackupInfo
name|info
range|:
name|affectedBackups
control|)
block|{
if|if
condition|(
name|info
operator|.
name|equals
argument_list|(
name|backupInfo
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|removeTableFromBackupImage
argument_list|(
name|info
argument_list|,
name|tn
argument_list|,
name|sysTable
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|map
init|=
name|sysTable
operator|.
name|readBulkLoadedFiles
argument_list|(
name|backupId
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conn
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|true
decl_stmt|;
name|int
name|numDeleted
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|f
argument_list|)
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Delete backup info "
operator|+
name|p
operator|+
literal|" for "
operator|+
name|backupInfo
operator|.
name|getBackupId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|)
condition|)
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|f
operator|+
literal|" was not deleted"
argument_list|)
expr_stmt|;
name|success
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|numDeleted
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|f
operator|+
literal|" was not deleted"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|success
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|numDeleted
operator|+
literal|" bulk loaded files out of "
operator|+
name|map
operator|.
name|size
argument_list|()
operator|+
literal|" were deleted"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|success
condition|)
block|{
name|sysTable
operator|.
name|deleteBulkLoadedFiles
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
name|sysTable
operator|.
name|deleteBackupInfo
argument_list|(
name|backupInfo
operator|.
name|getBackupId
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Delete backup "
operator|+
name|backupInfo
operator|.
name|getBackupId
argument_list|()
operator|+
literal|" completed."
argument_list|)
expr_stmt|;
name|totalDeleted
operator|++
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Delete backup failed: no information found for backupID="
operator|+
name|backupId
argument_list|)
expr_stmt|;
block|}
return|return
name|totalDeleted
return|;
block|}
specifier|private
name|void
name|removeTableFromBackupImage
parameter_list|(
name|BackupInfo
name|info
parameter_list|,
name|TableName
name|tn
parameter_list|,
name|BackupSystemTable
name|sysTable
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|TableName
argument_list|>
name|tables
init|=
name|info
operator|.
name|getTableNames
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Remove "
operator|+
name|tn
operator|+
literal|" from "
operator|+
name|info
operator|.
name|getBackupId
argument_list|()
operator|+
literal|" tables="
operator|+
name|info
operator|.
name|getTableListAsString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tables
operator|.
name|contains
argument_list|(
name|tn
argument_list|)
condition|)
block|{
name|tables
operator|.
name|remove
argument_list|(
name|tn
argument_list|)
expr_stmt|;
if|if
condition|(
name|tables
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Delete backup info "
operator|+
name|info
operator|.
name|getBackupId
argument_list|()
argument_list|)
expr_stmt|;
name|sysTable
operator|.
name|deleteBackupInfo
argument_list|(
name|info
operator|.
name|getBackupId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Idempotent operation
name|BackupUtils
operator|.
name|cleanupBackupData
argument_list|(
name|info
argument_list|,
name|conn
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
operator|.
name|setTables
argument_list|(
name|tables
argument_list|)
expr_stmt|;
name|sysTable
operator|.
name|updateBackupInfo
argument_list|(
name|info
argument_list|)
expr_stmt|;
comment|// Now, clean up directory for table (idempotent)
name|cleanupBackupDir
argument_list|(
name|info
argument_list|,
name|tn
argument_list|,
name|conn
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|getAffectedBackupSessions
parameter_list|(
name|BackupInfo
name|backupInfo
parameter_list|,
name|TableName
name|tn
parameter_list|,
name|BackupSystemTable
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"GetAffectedBackupInfos for: "
operator|+
name|backupInfo
operator|.
name|getBackupId
argument_list|()
operator|+
literal|" table="
operator|+
name|tn
argument_list|)
expr_stmt|;
name|long
name|ts
init|=
name|backupInfo
operator|.
name|getStartTs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|BackupInfo
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|history
init|=
name|table
operator|.
name|getBackupHistory
argument_list|(
name|backupInfo
operator|.
name|getBackupRootDir
argument_list|()
argument_list|)
decl_stmt|;
comment|// Scan from most recent to backupInfo
comment|// break when backupInfo reached
for|for
control|(
name|BackupInfo
name|info
range|:
name|history
control|)
block|{
if|if
condition|(
name|info
operator|.
name|getStartTs
argument_list|()
operator|==
name|ts
condition|)
block|{
break|break;
block|}
name|List
argument_list|<
name|TableName
argument_list|>
name|tables
init|=
name|info
operator|.
name|getTableNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|tables
operator|.
name|contains
argument_list|(
name|tn
argument_list|)
condition|)
block|{
name|BackupType
name|bt
init|=
name|info
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|bt
operator|==
name|BackupType
operator|.
name|FULL
condition|)
block|{
comment|// Clear list if we encounter FULL backup
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"GetAffectedBackupInfos for: "
operator|+
name|backupInfo
operator|.
name|getBackupId
argument_list|()
operator|+
literal|" table="
operator|+
name|tn
operator|+
literal|" added "
operator|+
name|info
operator|.
name|getBackupId
argument_list|()
operator|+
literal|" tables="
operator|+
name|info
operator|.
name|getTableListAsString
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|list
return|;
block|}
comment|/**    * Clean up the data at target directory    * @throws IOException    */
specifier|private
name|void
name|cleanupBackupDir
parameter_list|(
name|BackupInfo
name|backupInfo
parameter_list|,
name|TableName
name|table
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// clean up the data at target directory
name|String
name|targetDir
init|=
name|backupInfo
operator|.
name|getBackupRootDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetDir
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No target directory specified for "
operator|+
name|backupInfo
operator|.
name|getBackupId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|FileSystem
name|outputFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|Path
argument_list|(
name|backupInfo
operator|.
name|getBackupRootDir
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Path
name|targetDirPath
init|=
operator|new
name|Path
argument_list|(
name|BackupUtils
operator|.
name|getTableBackupDir
argument_list|(
name|backupInfo
operator|.
name|getBackupRootDir
argument_list|()
argument_list|,
name|backupInfo
operator|.
name|getBackupId
argument_list|()
argument_list|,
name|table
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputFs
operator|.
name|delete
argument_list|(
name|targetDirPath
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleaning up backup data at "
operator|+
name|targetDirPath
operator|.
name|toString
argument_list|()
operator|+
literal|" done."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No data has been found in "
operator|+
name|targetDirPath
operator|.
name|toString
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cleaning up backup data of "
operator|+
name|backupInfo
operator|.
name|getBackupId
argument_list|()
operator|+
literal|" for table "
operator|+
name|table
operator|+
literal|"at "
operator|+
name|backupInfo
operator|.
name|getBackupRootDir
argument_list|()
operator|+
literal|" failed due to "
operator|+
name|e1
operator|.
name|getMessage
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
throw|throw
name|e1
throw|;
block|}
block|}
specifier|private
name|boolean
name|isLastBackupSession
parameter_list|(
name|BackupSystemTable
name|table
parameter_list|,
name|TableName
name|tn
parameter_list|,
name|long
name|startTime
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|history
init|=
name|table
operator|.
name|getBackupHistory
argument_list|()
decl_stmt|;
for|for
control|(
name|BackupInfo
name|info
range|:
name|history
control|)
block|{
name|List
argument_list|<
name|TableName
argument_list|>
name|tables
init|=
name|info
operator|.
name|getTableNames
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tables
operator|.
name|contains
argument_list|(
name|tn
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|info
operator|.
name|getStartTs
argument_list|()
operator|<=
name|startTime
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|getHistory
parameter_list|(
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
specifier|final
name|BackupSystemTable
name|table
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|history
init|=
name|table
operator|.
name|getBackupHistory
argument_list|()
decl_stmt|;
if|if
condition|(
name|history
operator|.
name|size
argument_list|()
operator|<=
name|n
condition|)
return|return
name|history
return|;
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|BackupInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|history
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|getHistory
parameter_list|(
name|int
name|n
parameter_list|,
name|BackupInfo
operator|.
name|Filter
modifier|...
name|filters
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|filters
operator|.
name|length
operator|==
literal|0
condition|)
return|return
name|getHistory
argument_list|(
name|n
argument_list|)
return|;
try|try
init|(
specifier|final
name|BackupSystemTable
name|table
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|history
init|=
name|table
operator|.
name|getBackupHistory
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|BackupInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BackupInfo
name|bi
range|:
name|history
control|)
block|{
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|==
name|n
condition|)
break|break;
name|boolean
name|passed
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|filters
index|[
name|i
index|]
operator|.
name|apply
argument_list|(
name|bi
argument_list|)
condition|)
block|{
name|passed
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|passed
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|bi
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|BackupSet
argument_list|>
name|listBackupSets
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
specifier|final
name|BackupSystemTable
name|table
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|table
operator|.
name|listBackupSets
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BackupSet
argument_list|>
name|bslist
init|=
operator|new
name|ArrayList
argument_list|<
name|BackupSet
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|list
control|)
block|{
name|List
argument_list|<
name|TableName
argument_list|>
name|tables
init|=
name|table
operator|.
name|describeBackupSet
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|tables
operator|!=
literal|null
condition|)
block|{
name|bslist
operator|.
name|add
argument_list|(
operator|new
name|BackupSet
argument_list|(
name|s
argument_list|,
name|tables
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bslist
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|BackupSet
name|getBackupSet
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
specifier|final
name|BackupSystemTable
name|table
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|List
argument_list|<
name|TableName
argument_list|>
name|list
init|=
name|table
operator|.
name|describeBackupSet
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|BackupSet
argument_list|(
name|name
argument_list|,
name|list
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deleteBackupSet
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
specifier|final
name|BackupSystemTable
name|table
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
init|)
block|{
if|if
condition|(
name|table
operator|.
name|describeBackupSet
argument_list|(
name|name
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|table
operator|.
name|deleteBackupSet
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addToBackupSet
parameter_list|(
name|String
name|name
parameter_list|,
name|TableName
index|[]
name|tables
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|tableNames
init|=
operator|new
name|String
index|[
name|tables
operator|.
name|length
index|]
decl_stmt|;
try|try
init|(
specifier|final
name|BackupSystemTable
name|table
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
init|;
name|final
name|Admin
name|admin
operator|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|;
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tableNames
index|[
name|i
index|]
operator|=
name|tables
index|[
name|i
index|]
operator|.
name|getNameAsString
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|admin
operator|.
name|tableExists
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableNames
index|[
name|i
index|]
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot add "
operator|+
name|tableNames
index|[
name|i
index|]
operator|+
literal|" because it doesn't exist"
argument_list|)
throw|;
block|}
block|}
name|table
operator|.
name|addToBackupSet
argument_list|(
name|name
argument_list|,
name|tableNames
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added tables ["
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|tableNames
argument_list|,
literal|" "
argument_list|)
operator|+
literal|"] to '"
operator|+
name|name
operator|+
literal|"' backup set"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeFromBackupSet
parameter_list|(
name|String
name|name
parameter_list|,
name|TableName
index|[]
name|tables
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing tables ["
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|tables
argument_list|,
literal|" "
argument_list|)
operator|+
literal|"] from '"
operator|+
name|name
operator|+
literal|"'"
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|BackupSystemTable
name|table
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|table
operator|.
name|removeFromBackupSet
argument_list|(
name|name
argument_list|,
name|toStringArray
argument_list|(
name|tables
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing tables ["
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|tables
argument_list|,
literal|" "
argument_list|)
operator|+
literal|"] from '"
operator|+
name|name
operator|+
literal|"' completed."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
index|[]
name|toStringArray
parameter_list|(
name|TableName
index|[]
name|list
parameter_list|)
block|{
name|String
index|[]
name|arr
init|=
operator|new
name|String
index|[
name|list
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|arr
index|[
name|i
index|]
operator|=
name|list
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|arr
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|restore
parameter_list|(
name|RestoreRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|request
operator|.
name|isCheck
argument_list|()
condition|)
block|{
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|BackupManifest
argument_list|>
name|backupManifestMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// check and load backup image manifest for the tables
name|Path
name|rootPath
init|=
operator|new
name|Path
argument_list|(
name|request
operator|.
name|getBackupRootDir
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|backupId
init|=
name|request
operator|.
name|getBackupId
argument_list|()
decl_stmt|;
name|TableName
index|[]
name|sTableArray
init|=
name|request
operator|.
name|getFromTables
argument_list|()
decl_stmt|;
name|HBackupFileSystem
operator|.
name|checkImageManifestExist
argument_list|(
name|backupManifestMap
argument_list|,
name|sTableArray
argument_list|,
name|conn
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|rootPath
argument_list|,
name|backupId
argument_list|)
expr_stmt|;
comment|// Check and validate the backup image and its dependencies
if|if
condition|(
name|BackupUtils
operator|.
name|validate
argument_list|(
name|backupManifestMap
argument_list|,
name|conn
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|CHECK_OK
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
name|CHECK_FAILED
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|// Execute restore request
operator|new
name|RestoreTablesClient
argument_list|(
name|conn
argument_list|,
name|request
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|backupTables
parameter_list|(
name|BackupRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|BackupType
name|type
init|=
name|request
operator|.
name|getBackupType
argument_list|()
decl_stmt|;
name|String
name|targetRootDir
init|=
name|request
operator|.
name|getTargetRootDir
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TableName
argument_list|>
name|tableList
init|=
name|request
operator|.
name|getTableList
argument_list|()
decl_stmt|;
name|String
name|backupId
init|=
name|BackupRestoreConstants
operator|.
name|BACKUPID_PREFIX
operator|+
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|BackupType
operator|.
name|INCREMENTAL
condition|)
block|{
name|Set
argument_list|<
name|TableName
argument_list|>
name|incrTableSet
init|=
literal|null
decl_stmt|;
try|try
init|(
name|BackupSystemTable
name|table
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|incrTableSet
operator|=
name|table
operator|.
name|getIncrementalBackupTableSet
argument_list|(
name|targetRootDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incrTableSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Incremental backup table set contains no tables. "
operator|+
literal|"You need to run full backup first "
operator|+
operator|(
name|tableList
operator|!=
literal|null
condition|?
literal|"on "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|tableList
argument_list|,
literal|","
argument_list|)
else|:
literal|""
operator|)
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|tableList
operator|!=
literal|null
condition|)
block|{
name|tableList
operator|.
name|removeAll
argument_list|(
name|incrTableSet
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tableList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|extraTables
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|tableList
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|"Some tables ("
operator|+
name|extraTables
operator|+
literal|") haven't gone through full backup. "
operator|+
literal|"Perform full backup on "
operator|+
name|extraTables
operator|+
literal|" first, "
operator|+
literal|"then retry the command"
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
name|tableList
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|incrTableSet
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tableList
operator|!=
literal|null
operator|&&
operator|!
name|tableList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|TableName
name|table
range|:
name|tableList
control|)
block|{
name|String
name|targetTableBackupDir
init|=
name|HBackupFileSystem
operator|.
name|getTableBackupDir
argument_list|(
name|targetRootDir
argument_list|,
name|backupId
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|Path
name|targetTableBackupDirPath
init|=
operator|new
name|Path
argument_list|(
name|targetTableBackupDir
argument_list|)
decl_stmt|;
name|FileSystem
name|outputFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|targetTableBackupDirPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|conn
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputFs
operator|.
name|exists
argument_list|(
name|targetTableBackupDirPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Target backup directory "
operator|+
name|targetTableBackupDir
operator|+
literal|" exists already."
argument_list|)
throw|;
block|}
block|}
name|ArrayList
argument_list|<
name|TableName
argument_list|>
name|nonExistingTableList
init|=
literal|null
decl_stmt|;
try|try
init|(
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|;)
block|{
for|for
control|(
name|TableName
name|tableName
range|:
name|tableList
control|)
block|{
if|if
condition|(
operator|!
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
if|if
condition|(
name|nonExistingTableList
operator|==
literal|null
condition|)
block|{
name|nonExistingTableList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|nonExistingTableList
operator|.
name|add
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|nonExistingTableList
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|BackupType
operator|.
name|INCREMENTAL
condition|)
block|{
comment|// Update incremental backup set
name|tableList
operator|=
name|excludeNonExistingTables
argument_list|(
name|tableList
argument_list|,
name|nonExistingTableList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Throw exception only in full mode - we try to backup non-existing table
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Non-existing tables found in the table list: "
operator|+
name|nonExistingTableList
argument_list|)
throw|;
block|}
block|}
block|}
comment|// update table list
name|BackupRequest
operator|.
name|Builder
name|builder
init|=
operator|new
name|BackupRequest
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|request
operator|=
name|builder
operator|.
name|withBackupType
argument_list|(
name|request
operator|.
name|getBackupType
argument_list|()
argument_list|)
operator|.
name|withTableList
argument_list|(
name|tableList
argument_list|)
operator|.
name|withTargetRootDir
argument_list|(
name|request
operator|.
name|getTargetRootDir
argument_list|()
argument_list|)
operator|.
name|withBackupSetName
argument_list|(
name|request
operator|.
name|getBackupSetName
argument_list|()
argument_list|)
operator|.
name|withTotalTasks
argument_list|(
name|request
operator|.
name|getTotalTasks
argument_list|()
argument_list|)
operator|.
name|withBandwidthPerTasks
argument_list|(
operator|(
name|int
operator|)
name|request
operator|.
name|getBandwidth
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|TableBackupClient
name|client
init|=
literal|null
decl_stmt|;
try|try
block|{
name|client
operator|=
name|BackupClientFactory
operator|.
name|create
argument_list|(
name|conn
argument_list|,
name|backupId
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"There is an active session already running"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|client
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|backupId
return|;
block|}
specifier|private
name|List
argument_list|<
name|TableName
argument_list|>
name|excludeNonExistingTables
parameter_list|(
name|List
argument_list|<
name|TableName
argument_list|>
name|tableList
parameter_list|,
name|List
argument_list|<
name|TableName
argument_list|>
name|nonExistingTableList
parameter_list|)
block|{
for|for
control|(
name|TableName
name|table
range|:
name|nonExistingTableList
control|)
block|{
name|tableList
operator|.
name|remove
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
return|return
name|tableList
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|mergeBackups
parameter_list|(
name|String
index|[]
name|backupIds
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
specifier|final
name|BackupSystemTable
name|sysTable
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
init|;
init|)
block|{
name|checkIfValidForMerge
argument_list|(
name|backupIds
argument_list|,
name|sysTable
argument_list|)
expr_stmt|;
name|BackupMergeJob
name|job
init|=
name|BackupRestoreFactory
operator|.
name|getBackupMergeJob
argument_list|(
name|conn
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|job
operator|.
name|run
argument_list|(
name|backupIds
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verifies that backup images are valid for merge.    *    *<ul>    *<li>All backups MUST be in the same destination    *<li>No FULL backups are allowed - only INCREMENTAL    *<li>All backups must be in COMPLETE state    *<li>No holes in backup list are allowed    *</ul>    *<p>    * @param backupIds list of backup ids    * @param table backup system table    * @throws IOException    */
specifier|private
name|void
name|checkIfValidForMerge
parameter_list|(
name|String
index|[]
name|backupIds
parameter_list|,
name|BackupSystemTable
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|backupRoot
init|=
literal|null
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|TableName
argument_list|>
name|allTables
init|=
operator|new
name|HashSet
argument_list|<
name|TableName
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|allBackups
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|minTime
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|,
name|maxTime
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|String
name|backupId
range|:
name|backupIds
control|)
block|{
name|BackupInfo
name|bInfo
init|=
name|table
operator|.
name|readBackupInfo
argument_list|(
name|backupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|bInfo
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Backup session "
operator|+
name|backupId
operator|+
literal|" not found"
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|backupRoot
operator|==
literal|null
condition|)
block|{
name|backupRoot
operator|=
name|bInfo
operator|.
name|getBackupRootDir
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|bInfo
operator|.
name|getBackupRootDir
argument_list|()
operator|.
name|equals
argument_list|(
name|backupRoot
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Found different backup destinations in a list of a backup sessions \n"
operator|+
literal|"1. "
operator|+
name|backupRoot
operator|+
literal|"\n"
operator|+
literal|"2. "
operator|+
name|bInfo
operator|.
name|getBackupRootDir
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|bInfo
operator|.
name|getType
argument_list|()
operator|==
name|BackupType
operator|.
name|FULL
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"FULL backup image can not be merged for: \n"
operator|+
name|bInfo
argument_list|)
throw|;
block|}
if|if
condition|(
name|bInfo
operator|.
name|getState
argument_list|()
operator|!=
name|BackupState
operator|.
name|COMPLETE
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Backup image "
operator|+
name|backupId
operator|+
literal|" can not be merged becuase of its state: "
operator|+
name|bInfo
operator|.
name|getState
argument_list|()
argument_list|)
throw|;
block|}
name|allBackups
operator|.
name|add
argument_list|(
name|backupId
argument_list|)
expr_stmt|;
name|allTables
operator|.
name|addAll
argument_list|(
name|bInfo
operator|.
name|getTableNames
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|time
init|=
name|bInfo
operator|.
name|getStartTs
argument_list|()
decl_stmt|;
if|if
condition|(
name|time
operator|<
name|minTime
condition|)
block|{
name|minTime
operator|=
name|time
expr_stmt|;
block|}
if|if
condition|(
name|time
operator|>
name|maxTime
condition|)
block|{
name|maxTime
operator|=
name|time
expr_stmt|;
block|}
block|}
specifier|final
name|long
name|startRangeTime
init|=
name|minTime
decl_stmt|;
specifier|final
name|long
name|endRangeTime
init|=
name|maxTime
decl_stmt|;
specifier|final
name|String
name|backupDest
init|=
name|backupRoot
decl_stmt|;
comment|// Check we have no 'holes' in backup id list
comment|// Filter 1 : backupRoot
comment|// Filter 2 : time range filter
comment|// Filter 3 : table filter
name|BackupInfo
operator|.
name|Filter
name|destinationFilter
init|=
operator|new
name|BackupInfo
operator|.
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|BackupInfo
name|info
parameter_list|)
block|{
return|return
name|info
operator|.
name|getBackupRootDir
argument_list|()
operator|.
name|equals
argument_list|(
name|backupDest
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|BackupInfo
operator|.
name|Filter
name|timeRangeFilter
init|=
operator|new
name|BackupInfo
operator|.
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|BackupInfo
name|info
parameter_list|)
block|{
name|long
name|time
init|=
name|info
operator|.
name|getStartTs
argument_list|()
decl_stmt|;
return|return
name|time
operator|>=
name|startRangeTime
operator|&&
name|time
operator|<=
name|endRangeTime
return|;
block|}
block|}
decl_stmt|;
name|BackupInfo
operator|.
name|Filter
name|tableFilter
init|=
operator|new
name|BackupInfo
operator|.
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|BackupInfo
name|info
parameter_list|)
block|{
name|List
argument_list|<
name|TableName
argument_list|>
name|tables
init|=
name|info
operator|.
name|getTableNames
argument_list|()
decl_stmt|;
return|return
operator|!
name|Collections
operator|.
name|disjoint
argument_list|(
name|allTables
argument_list|,
name|tables
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|BackupInfo
operator|.
name|Filter
name|typeFilter
init|=
operator|new
name|BackupInfo
operator|.
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|BackupInfo
name|info
parameter_list|)
block|{
return|return
name|info
operator|.
name|getType
argument_list|()
operator|==
name|BackupType
operator|.
name|INCREMENTAL
return|;
block|}
block|}
decl_stmt|;
name|BackupInfo
operator|.
name|Filter
name|stateFilter
init|=
operator|new
name|BackupInfo
operator|.
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|BackupInfo
name|info
parameter_list|)
block|{
return|return
name|info
operator|.
name|getState
argument_list|()
operator|==
name|BackupState
operator|.
name|COMPLETE
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|allInfos
init|=
name|table
operator|.
name|getBackupHistory
argument_list|(
operator|-
literal|1
argument_list|,
name|destinationFilter
argument_list|,
name|timeRangeFilter
argument_list|,
name|tableFilter
argument_list|,
name|typeFilter
argument_list|,
name|stateFilter
argument_list|)
decl_stmt|;
if|if
condition|(
name|allInfos
operator|.
name|size
argument_list|()
operator|!=
name|allBackups
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// Yes we have at least one  hole in backup image sequence
name|List
argument_list|<
name|String
argument_list|>
name|missingIds
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BackupInfo
name|info
range|:
name|allInfos
control|)
block|{
if|if
condition|(
name|allBackups
operator|.
name|contains
argument_list|(
name|info
operator|.
name|getBackupId
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|missingIds
operator|.
name|add
argument_list|(
name|info
operator|.
name|getBackupId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|errMsg
init|=
literal|"Sequence of backup ids has 'holes'. The following backup images must be added:"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|missingIds
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

