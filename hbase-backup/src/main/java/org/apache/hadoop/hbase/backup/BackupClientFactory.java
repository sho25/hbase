begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
operator|.
name|FullTableBackupClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
operator|.
name|IncrementalTableBackupClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
operator|.
name|TableBackupClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|BackupClientFactory
block|{
specifier|private
name|BackupClientFactory
parameter_list|()
block|{   }
specifier|public
specifier|static
name|TableBackupClient
name|create
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|String
name|backupId
parameter_list|,
name|BackupRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|conn
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|clsName
init|=
name|conf
operator|.
name|get
argument_list|(
name|TableBackupClient
operator|.
name|BACKUP_CLIENT_IMPL_CLASS
argument_list|)
decl_stmt|;
if|if
condition|(
name|clsName
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|TableBackupClient
argument_list|>
name|clientImpl
decl_stmt|;
name|clientImpl
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|clsName
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|TableBackupClient
operator|.
name|class
argument_list|)
expr_stmt|;
name|TableBackupClient
name|client
init|=
name|clientImpl
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conn
argument_list|,
name|backupId
argument_list|,
name|request
argument_list|)
expr_stmt|;
return|return
name|client
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|BackupType
name|type
init|=
name|request
operator|.
name|getBackupType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|BackupType
operator|.
name|FULL
condition|)
block|{
return|return
operator|new
name|FullTableBackupClient
argument_list|(
name|conn
argument_list|,
name|backupId
argument_list|,
name|request
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|IncrementalTableBackupClient
argument_list|(
name|conn
argument_list|,
name|backupId
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

