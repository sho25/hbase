/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
option java_package = "org.apache.hadoop.hbase.protobuf.generated";
option java_outer_classname = "MasterProcedureProtos";
option java_generic_services = true;
option java_generate_equals_and_hash = true;
option optimize_for = SPEED;

import "HBase.proto";
import "RPC.proto";

// ============================================================================
//  WARNING - Compatibility rules
// ============================================================================
// This .proto contains the data serialized by the master procedures.
// Each procedure has some state stored to know, which step were executed
// and what were the parameters or data created by the previous steps.
// new code should be able to handle the old format or at least fail cleanly
// triggering a rollback/cleanup.
//
// Procedures that are inheriting from a StateMachineProcedure have an enum:
//  - Do not change the number of the 'State' enums.
//    doing so, will cause executing the wrong 'step' on the pending
//    procedures when they will be replayed.
//  - Do not remove items from the enum, new code must be able to handle
//    all the previous 'steps'. There may be pending procedure ready to be
//    recovered replayed. alternative you can make sure that not-known state
//    will result in a failure that will rollback the already executed steps.
// ============================================================================

enum CreateTableState {
  CREATE_TABLE_PRE_OPERATION = 1;
  CREATE_TABLE_WRITE_FS_LAYOUT = 2;
  CREATE_TABLE_ADD_TO_META = 3;
  CREATE_TABLE_ASSIGN_REGIONS = 4;
  CREATE_TABLE_UPDATE_DESC_CACHE = 5;
  CREATE_TABLE_POST_OPERATION = 6;
}

message CreateTableStateData {
  required UserInformation user_info = 1;
  required TableSchema table_schema = 2;
  repeated RegionInfo region_info = 3;
}

enum DeleteTableState {
  DELETE_TABLE_PRE_OPERATION = 1;
  DELETE_TABLE_REMOVE_FROM_META = 2;
  DELETE_TABLE_CLEAR_FS_LAYOUT = 3;
  DELETE_TABLE_UPDATE_DESC_CACHE = 4;
  DELETE_TABLE_UNASSIGN_REGIONS = 5;
  DELETE_TABLE_POST_OPERATION = 6;
}

message DeleteTableStateData {
  required UserInformation user_info = 1;
  required TableName table_name = 2;
  repeated RegionInfo region_info = 3;
}
