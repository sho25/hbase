/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file contains protocol buffers that are used for ClustStatus

option java_package = "org.apache.hadoop.hbase.protobuf.generated";
option java_outer_classname = "ClusterStatusProtos";
option java_generate_equals_and_hash = true;
option optimize_for = SPEED;

import "hbase.proto";
import "ClusterId.proto";
import "FS.proto";

message RegionState {
  required RegionInfo regionInfo = 1;
  required State state = 2;
  optional uint64 stamp = 3;
  enum State {
    OFFLINE = 0;       // region is in an offline state
    PENDING_OPEN = 1;  // sent rpc to server to open but has not begun
    OPENING = 2;       // server has begun to open but not yet done
    OPEN = 3;          // server opened region and updated meta
    PENDING_CLOSE = 4; // sent rpc to server to close but has not begun
    CLOSING = 5;       // server has begun to close but not yet done
    CLOSED = 6;        // server closed region and updated meta
    SPLITTING = 7;     // server started split of a region
    SPLIT = 8;         // server completed split of a region
    FAILED_OPEN = 9;   // failed to open, and won't retry any more
    FAILED_CLOSE = 10; // failed to close, and won't retry any more
  }
}

message RegionInTransition {
  required RegionSpecifier spec = 1;
  required RegionState regionState = 2;
}

message RegionLoad {
  /** the region specifier */
  required RegionSpecifier regionSpecifier = 1;

  /** the number of stores for the region */
  optional uint32 stores = 2;

  /** the number of storefiles for the region */
  optional uint32 storefiles = 3;

  /** the total size of the store files for the region, uncompressed, in MB */
  optional uint32 storeUncompressedSizeMB = 4;

  /** the current total size of the store files for the region, in MB */
  optional uint32 storefileSizeMB = 5;

  /** the current size of the memstore for the region, in MB */
  optional uint32 memstoreSizeMB = 6;

  /**
   * The current total size of root-level store file indexes for the region,
   * in MB. The same as {@link #rootIndexSizeKB} but in MB.
   */
  optional uint32 storefileIndexSizeMB = 7;

  /** the current total read requests made to region */
  optional uint64 readRequestsCount = 8;

  /** the current total write requests made to region */
  optional uint64 writeRequestsCount = 9;

  /** the total compacting key values in currently running compaction */
  optional uint64 totalCompactingKVs = 10;

  /** the completed count of key values in currently running compaction */
  optional uint64 currentCompactedKVs = 11;

   /** The current total size of root-level indexes for the region, in KB. */
  optional uint32 rootIndexSizeKB = 12;

  /** The total size of all index blocks, not just the root level, in KB. */
  optional uint32 totalStaticIndexSizeKB = 13;

  /**
   * The total size of all Bloom filter blocks, not just loaded into the
   * block cache, in KB.
   */
  optional uint32 totalStaticBloomSizeKB = 14;

  /** the most recent sequence Id from cache flush */
  optional uint64 completeSequenceId = 15;
}

/* Server-level protobufs */

message ServerLoad {
  /** Number of requests since last report. */
  optional uint32 numberOfRequests = 1;

  /** Total Number of requests from the start of the region server. */
  optional uint32 totalNumberOfRequests = 2;

  /** the amount of used heap, in MB. */
  optional uint32 usedHeapMB = 3;

  /** the maximum allowable size of the heap, in MB. */
  optional uint32 maxHeapMB = 4;

  /** Information on the load of individual regions. */
  repeated RegionLoad regionLoads = 5;

  /**
   * Regionserver-level coprocessors, e.g., WALObserver implementations.
   * Region-level coprocessors, on the other hand, are stored inside RegionLoad
   * objects.
   */
  repeated Coprocessor coprocessors = 6;

  /**
   * Time when incremental (non-total) counts began being calculated (e.g. numberOfRequests)
   * time is measured as the difference, measured in milliseconds, between the current time
   * and midnight, January 1, 1970 UTC.
   */
  optional uint64 reportStartTime = 7;

  /**
   * Time when report was generated.
   * time is measured as the difference, measured in milliseconds, between the current time
   * and midnight, January 1, 1970 UTC.
   */
  optional uint64 reportEndTime = 8;

  /**
   * The port number that this region server is hosing an info server on.
   */
  optional uint32 infoServerPort = 9;
}

message LiveServerInfo {
  required ServerName server = 1;
  required ServerLoad serverLoad = 2;
}


message ClusterStatus {
  optional HBaseVersionFileContent hbaseVersion = 1;
  repeated LiveServerInfo liveServers = 2;
  repeated ServerName deadServers = 3;
  repeated RegionInTransition regionsInTransition = 4;
  optional ClusterId clusterId = 5;
  repeated Coprocessor masterCoprocessors = 6;
  optional ServerName master = 7;
  repeated ServerName backupMasters = 8;
  optional bool balancerOn = 9;
}
